{"ast":null,"code":"import { __decorate } from \"tslib\";\n// Home para visualizar, crear, editar y eliminar tipos de tarea\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet HomeComponent = class HomeComponent {\n  constructor(taskTypeService, router) {\n    this.taskTypeService = taskTypeService;\n    this.router = router;\n    // Lista de tipos de tareas\n    this.taskTypes = [];\n    // Estado del modal para crear tipo\n    this.isModalOpen = false;\n    // Nuevo tipo de tarea\n    this.newTaskType = '';\n    // Modal lateral: editar\n    this.isEditModalOpen = false;\n    this.taskTypeToEdit = '';\n    this.editedTaskType = '';\n    // Modal lateral: eliminar\n    this.isDeleteModalOpen = false;\n    this.taskTypeToDelete = '';\n  }\n  // Carga inicial de tipos al entrar al componente\n  ngOnInit() {\n    console.log('[INIT] Home cargado');\n    this.loadTaskTypes();\n  }\n  // Consulta todos los tipos de tareas existentes\n  loadTaskTypes() {\n    this.taskTypeService.getAllTaskTypes().subscribe({\n      next: types => {\n        console.log('[GET] Tipos cargados:', types);\n        this.taskTypes = types;\n      },\n      error: err => {\n        console.error('[ERROR] Al obtener tipos de tarea:', err);\n      }\n    });\n  }\n  // Abre el modal de creación\n  openModal() {\n    this.isModalOpen = true;\n  }\n  // Cierra el modal de creación\n  closeModal() {\n    this.isModalOpen = false;\n    this.newTaskType = '';\n  }\n  // Agrega un nuevo tipo de tarea\n  addTaskType() {\n    if (this.newTaskType.trim()) {\n      this.taskTypeService.addTaskType(this.newTaskType).subscribe({\n        next: () => {\n          this.loadTaskTypes();\n          this.closeModal();\n        },\n        error: err => {\n          console.error('[ERROR] Al agregar tipo:', err);\n        }\n      });\n    }\n  }\n  // cuando haces click en ingresar, debes pasar el objeto, no string\n  enterTaskType(taskType) {\n    console.log('[NAVIGATE TO]', taskType);\n    this.router.navigate(['/app/category', taskType.key]);\n  }\n  // ------------------ MODAL DE EDICIÓN ------------------\n  openEditModal(task) {\n    this.taskTypeToEdit = task.key;\n    this.editedTaskType = task.nombre;\n    this.isEditModalOpen = true;\n  }\n  closeEditModal() {\n    this.isEditModalOpen = false;\n    this.editedTaskType = '';\n    this.taskTypeToEdit = '';\n  }\n  saveTaskTypeEdit() {\n    if (this.editedTaskType.trim() && this.taskTypeToEdit) {\n      this.taskTypeService.editTaskType(this.taskTypeToEdit, this.editedTaskType).subscribe({\n        next: () => {\n          this.loadTaskTypes();\n          this.closeEditModal();\n        },\n        error: err => console.error('[ERROR] Al editar tipo:', err)\n      });\n    }\n  }\n  // ------------------ MODAL DE ELIMINACIÓN ------------------\n  openDeleteModal(task) {\n    this.taskTypeToDelete = task.key;\n    this.isDeleteModalOpen = true;\n  }\n  closeDeleteModal() {\n    this.taskTypeToDelete = '';\n    this.isDeleteModalOpen = false;\n  }\n  confirmDeleteTaskType() {\n    if (this.taskTypeToDelete) {\n      this.taskTypeService.deleteTaskType(this.taskTypeToDelete).subscribe({\n        next: () => {\n          this.loadTaskTypes();\n          this.closeDeleteModal();\n        },\n        error: err => console.error('[ERROR] Al eliminar tipo:', err)\n      });\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  standalone: true,\n  templateUrl: './home.component.html',\n  styleUrls: [],\n  imports: [CommonModule, FormsModule]\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","HomeComponent","constructor","taskTypeService","router","taskTypes","isModalOpen","newTaskType","isEditModalOpen","taskTypeToEdit","editedTaskType","isDeleteModalOpen","taskTypeToDelete","ngOnInit","console","log","loadTaskTypes","getAllTaskTypes","subscribe","next","types","error","err","openModal","closeModal","addTaskType","trim","enterTaskType","taskType","navigate","key","openEditModal","task","nombre","closeEditModal","saveTaskTypeEdit","editTaskType","openDeleteModal","closeDeleteModal","confirmDeleteTaskType","deleteTaskType","__decorate","selector","standalone","templateUrl","styleUrls","imports"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\pages\\home\\home.component.ts"],"sourcesContent":["// Home para visualizar, crear, editar y eliminar tipos de tarea\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TaskTypeService } from '../../services/taskType.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  templateUrl: './home.component.html',\r\n  styleUrls: [],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class HomeComponent {\r\n  // Lista de tipos de tareas\r\n  taskTypes: { key: string, nombre: string }[] = [];\r\n\r\n  // Estado del modal para crear tipo\r\n  isModalOpen = false;\r\n\r\n  // Nuevo tipo de tarea\r\n  newTaskType = '';\r\n\r\n  // Modal lateral: editar\r\n  isEditModalOpen: boolean = false;\r\n  taskTypeToEdit: string = '';\r\n  editedTaskType: string = '';\r\n\r\n  // Modal lateral: eliminar\r\n  isDeleteModalOpen: boolean = false;\r\n  taskTypeToDelete: string = '';\r\n\r\n  constructor(\r\n    private taskTypeService: TaskTypeService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Carga inicial de tipos al entrar al componente\r\n  ngOnInit(): void {\r\n    console.log('[INIT] Home cargado');\r\n    this.loadTaskTypes();\r\n  }\r\n\r\n  // Consulta todos los tipos de tareas existentes\r\n  loadTaskTypes(): void {\r\n    this.taskTypeService.getAllTaskTypes().subscribe({\r\n      next: (types) => {\r\n        console.log('[GET] Tipos cargados:', types);\r\n        this.taskTypes = types;\r\n      },\r\n      error: (err) => {\r\n        console.error('[ERROR] Al obtener tipos de tarea:', err);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Abre el modal de creación\r\n  openModal(): void {\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  // Cierra el modal de creación\r\n  closeModal(): void {\r\n    this.isModalOpen = false;\r\n    this.newTaskType = '';\r\n  }\r\n\r\n  // Agrega un nuevo tipo de tarea\r\n  addTaskType(): void {\r\n    if (this.newTaskType.trim()) {\r\n      this.taskTypeService.addTaskType(this.newTaskType).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeModal();\r\n        },\r\n        error: (err) => {\r\n          console.error('[ERROR] Al agregar tipo:', err);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // cuando haces click en ingresar, debes pasar el objeto, no string\r\n  enterTaskType(taskType: any): void {\r\n    console.log('[NAVIGATE TO]', taskType);\r\n    this.router.navigate(['/app/category', taskType.key]);\r\n  }\r\n\r\n\r\n  // ------------------ MODAL DE EDICIÓN ------------------\r\n\r\n  openEditModal(task: { key: string; nombre: string }): void {\r\n    this.taskTypeToEdit = task.key;\r\n    this.editedTaskType = task.nombre;\r\n    this.isEditModalOpen = true;\r\n  }\r\n\r\n  closeEditModal(): void {\r\n    this.isEditModalOpen = false;\r\n    this.editedTaskType = '';\r\n    this.taskTypeToEdit = '';\r\n  }\r\n\r\n  saveTaskTypeEdit(): void {\r\n    if (this.editedTaskType.trim() && this.taskTypeToEdit) {\r\n      this.taskTypeService\r\n        .editTaskType(this.taskTypeToEdit, this.editedTaskType)\r\n        .subscribe({\r\n          next: () => {\r\n            this.loadTaskTypes();\r\n            this.closeEditModal();\r\n          },\r\n          error: (err) => console.error('[ERROR] Al editar tipo:', err),\r\n        });\r\n    }\r\n  }\r\n\r\n  // ------------------ MODAL DE ELIMINACIÓN ------------------\r\n\r\n  openDeleteModal(task: { key: string; nombre: string }): void {\r\n    this.taskTypeToDelete = task.key;\r\n    this.isDeleteModalOpen = true;\r\n  }\r\n\r\n  closeDeleteModal(): void {\r\n    this.taskTypeToDelete = '';\r\n    this.isDeleteModalOpen = false;\r\n  }\r\n\r\n  confirmDeleteTaskType(): void {\r\n    if (this.taskTypeToDelete) {\r\n      this.taskTypeService.deleteTaskType(this.taskTypeToDelete).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeDeleteModal();\r\n        },\r\n        error: (err) => console.error('[ERROR] Al eliminar tipo:', err),\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}