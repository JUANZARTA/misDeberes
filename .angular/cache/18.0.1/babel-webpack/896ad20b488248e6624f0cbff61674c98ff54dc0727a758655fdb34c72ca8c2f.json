{"ast":null,"code":"import { map, switchMap, catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./date.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let TaskTypeService = /*#__PURE__*/(() => {\n  class TaskTypeService {\n    constructor(authService, dateService, http) {\n      this.authService = authService;\n      this.dateService = dateService;\n      this.http = http;\n      // URL base de la base de datos de Firebase\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\n    }\n    // Genera la ruta completa a la ubicación del usuario, año y mes\n    getPath() {\n      const user = this.authService.getUser();\n      const year = this.dateService.getSelectedYear();\n      const month = this.dateService.getSelectedMonth();\n      if (!user?.id || !year || !month) return null;\n      return `${this.dbUrl}/${user.id}/${year}/${month}/categorias`;\n    }\n    // Obtiene todos los nombres de tipos de tarea como array\n    getAllTaskTypes() {\n      const path = this.getPath();\n      if (!path) return of([]);\n      const url = `${path}.json`;\n      return this.http.get(url).pipe(map(response => {\n        return response ? Object.keys(response).map(key => response[key]?.nombre || key) : [];\n      }), catchError(err => {\n        console.error('[ERROR][GET TYPES]', err);\n        return of([]);\n      }));\n    }\n    // Agrega un nuevo tipo de tarea con estructura vacía\n    addTaskType(nombre) {\n      const path = this.getPath();\n      if (!path) return throwError(() => new Error('Ruta no válida'));\n      const safeName = this.sanitizeKey(nombre);\n      const url = `${path}/${safeName}.json`;\n      return this.http.put(url, {\n        tareas: {}\n      });\n    }\n    // Elimina un tipo de tarea por nombre\n    deleteTaskType(nombre) {\n      const url = `${this.getPath()}/${nombre}.json`;\n      return this.http.delete(url);\n    }\n    // Edita el nombre del tipo de tarea (clona y elimina)\n    editTaskType(oldName, newName) {\n      const path = this.getPath();\n      if (!path) return throwError(() => new Error('Ruta no válida'));\n      const oldKey = this.sanitizeKey(oldName);\n      const newKey = this.sanitizeKey(newName);\n      const oldUrl = `${path}/${oldKey}.json`;\n      const newUrl = `${path}/${newKey}.json`;\n      return this.http.get(oldUrl).pipe(switchMap(data => {\n        // modifica el campo visible si es necesario\n        const contenido = {\n          ...data,\n          nombre: newName\n        };\n        return this.http.put(newUrl, contenido);\n      }), switchMap(() => this.http.delete(oldUrl)), catchError(err => {\n        console.error('[ERROR][EDIT TYPE]', err);\n        return throwError(() => err);\n      }));\n    }\n    // Limpia el nombre para que sea una key válida en Firebase\n    sanitizeKey(key) {\n      return key.trim().toLowerCase().replace(/\\s+/g, '_');\n    }\n    static #_ = this.ɵfac = function TaskTypeService_Factory(t) {\n      return new (t || TaskTypeService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.DateService), i0.ɵɵinject(i3.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskTypeService,\n      factory: TaskTypeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskTypeService;\n})();","map":{"version":3,"names":["map","switchMap","catchError","of","throwError","TaskTypeService","constructor","authService","dateService","http","dbUrl","getPath","user","getUser","year","getSelectedYear","month","getSelectedMonth","id","getAllTaskTypes","path","url","get","pipe","response","Object","keys","key","nombre","err","console","error","addTaskType","Error","safeName","sanitizeKey","put","tareas","deleteTaskType","delete","editTaskType","oldName","newName","oldKey","newKey","oldUrl","newUrl","data","contenido","trim","toLowerCase","replace","_","i0","ɵɵinject","i1","AuthService","i2","DateService","i3","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// Servicio para gestionar tipos de tareas desde Firebase sin initializeApp\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { DateService } from './date.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskTypeService {\r\n\r\n  // URL base de la base de datos de Firebase\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private dateService: DateService,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  // Genera la ruta completa a la ubicación del usuario, año y mes\r\n  private getPath(): string | null {\r\n    const user = this.authService.getUser();\r\n    const year = this.dateService.getSelectedYear();\r\n    const month = this.dateService.getSelectedMonth();\r\n\r\n    if (!user?.id || !year || !month) return null;\r\n\r\n    return `${this.dbUrl}/${user.id}/${year}/${month}/categorias`;\r\n  }\r\n\r\n  // Obtiene todos los nombres de tipos de tarea como array\r\n  getAllTaskTypes(): Observable<string[]> {\r\n    const path = this.getPath();\r\n    if (!path) return of([]);\r\n\r\n    const url = `${path}.json`;\r\n    return this.http.get<{ [key: string]: any }>(url).pipe(\r\n      map(response => {\r\n        return response\r\n          ? Object.keys(response).map(key => response[key]?.nombre || key)\r\n          : [];\r\n      }),\r\n      catchError(err => {\r\n        console.error('[ERROR][GET TYPES]', err);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  // Agrega un nuevo tipo de tarea con estructura vacía\r\n  addTaskType(nombre: string): Observable<any> {\r\n    const path = this.getPath();\r\n    if (!path) return throwError(() => new Error('Ruta no válida'));\r\n\r\n    const safeName = this.sanitizeKey(nombre);\r\n    const url = `${path}/${safeName}.json`;\r\n    return this.http.put(url, { tareas: {} });\r\n  }\r\n\r\n  // Elimina un tipo de tarea por nombre\r\n  deleteTaskType(nombre: string) {\r\n    const url = `${this.getPath()}/${nombre}.json`;\r\n    return this.http.delete(url);\r\n      }\r\n\r\n  \r\n\r\n  // Edita el nombre del tipo de tarea (clona y elimina)\r\n  editTaskType(oldName: string, newName: string): Observable<any> {\r\n    const path = this.getPath();\r\n    if (!path) return throwError(() => new Error('Ruta no válida'));\r\n\r\n    const oldKey = this.sanitizeKey(oldName);\r\n    const newKey = this.sanitizeKey(newName);\r\n\r\n    const oldUrl = `${path}/${oldKey}.json`;\r\n    const newUrl = `${path}/${newKey}.json`;\r\n\r\n    return this.http.get(oldUrl).pipe(\r\n      switchMap((data: any) => {\r\n        // modifica el campo visible si es necesario\r\n        const contenido = { ...data, nombre: newName };\r\n        return this.http.put(newUrl, contenido);\r\n      }),\r\n      switchMap(() => this.http.delete(oldUrl)),\r\n      catchError(err => {\r\n        console.error('[ERROR][EDIT TYPE]', err);\r\n        return throwError(() => err);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  // Limpia el nombre para que sea una key válida en Firebase\r\n  private sanitizeKey(key: string): string {\r\n    return key.trim().toLowerCase().replace(/\\s+/g, '_');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}