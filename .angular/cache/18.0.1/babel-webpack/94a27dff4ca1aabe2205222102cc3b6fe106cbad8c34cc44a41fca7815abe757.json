{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DateService = /*#__PURE__*/(() => {\n  class DateService {\n    constructor(platformId, http // ✅ nuevo\n    ) {\n      this.http = http;\n      this.isBrowser = isPlatformBrowser(platformId);\n      if (this.isBrowser) {\n        const savedYear = localStorage.getItem('selectedYear');\n        const savedMonth = localStorage.getItem('selectedMonth');\n        if (!savedYear || !savedMonth) {\n          const now = new Date();\n          const defaultYear = now.getFullYear().toString();\n          const defaultMonth = (now.getMonth() + 1).toString().padStart(2, '0');\n          localStorage.setItem('selectedYear', defaultYear);\n          localStorage.setItem('selectedMonth', defaultMonth);\n          this.yearSubject = new BehaviorSubject(defaultYear);\n          this.monthSubject = new BehaviorSubject(defaultMonth);\n        } else {\n          this.yearSubject = new BehaviorSubject(savedYear);\n          this.monthSubject = new BehaviorSubject(savedMonth);\n        }\n      } else {\n        // SSR fallback\n        this.yearSubject = new BehaviorSubject('');\n        this.monthSubject = new BehaviorSubject('');\n      }\n    }\n    get selectedYear$() {\n      return this.yearSubject.asObservable();\n    }\n    get selectedMonth$() {\n      return this.monthSubject.asObservable();\n    }\n    get selectedDate$() {\n      return combineLatest([this.selectedYear$, this.selectedMonth$]).pipe(map(([year, month]) => ({\n        year,\n        month\n      })));\n    }\n    setDate(year, month) {\n      const formattedMonth = month.toString().padStart(2, '0');\n      this.yearSubject.next(year.toString());\n      this.monthSubject.next(formattedMonth);\n      if (this.isBrowser) {\n        localStorage.setItem('selectedYear', year.toString());\n        localStorage.setItem('selectedMonth', formattedMonth);\n      }\n    }\n    getSelectedYear() {\n      return this.yearSubject.value;\n    }\n    getSelectedMonth() {\n      return this.monthSubject.value;\n    }\n    resetToCurrentDate() {\n      const now = new Date();\n      const year = now.getFullYear().toString();\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      this.yearSubject.next(year);\n      this.monthSubject.next(month);\n      if (this.isBrowser) {\n        localStorage.setItem('selectedYear', year);\n        localStorage.setItem('selectedMonth', month);\n      }\n    }\n    // método: Notificar nuevo mes al usuario\n    notifyMonthChange(uid, year, month) {\n      const mes = this.getMonthName(month);\n      const mensaje = `Nuevo mes detectado: ${mes} ${year}`;\n      const url = `https://micartera-acd5b-default-rtdb.firebaseio.com/${uid}/notificaciones.json`;\n      const body = {\n        mensaje,\n        leido: false,\n        fecha: new Date().toLocaleString()\n      };\n      this.http.post(url, body).subscribe();\n    }\n    // método: Obtener nombre del mes en español\n    getMonthName(month) {\n      const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      return meses[parseInt(month) - 1] || '';\n    }\n    static #_ = this.ɵfac = function DateService_Factory(t) {\n      return new (t || DateService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DateService,\n      factory: DateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DateService;\n})();","map":{"version":3,"names":["PLATFORM_ID","isPlatformBrowser","BehaviorSubject","combineLatest","map","DateService","constructor","platformId","http","isBrowser","savedYear","localStorage","getItem","savedMonth","now","Date","defaultYear","getFullYear","toString","defaultMonth","getMonth","padStart","setItem","yearSubject","monthSubject","selectedYear$","asObservable","selectedMonth$","selectedDate$","pipe","year","month","setDate","formattedMonth","next","getSelectedYear","value","getSelectedMonth","resetToCurrentDate","notifyMonthChange","uid","mes","getMonthName","mensaje","url","body","leido","fecha","toLocaleString","post","subscribe","meses","parseInt","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\services\\date.service.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http'; // ✅ nuevo\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DateService {\r\n  private yearSubject: BehaviorSubject<string>;\r\n  private monthSubject: BehaviorSubject<string>;\r\n  private isBrowser: boolean;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    private http: HttpClient // ✅ nuevo\r\n  ) {\r\n    this.isBrowser = isPlatformBrowser(platformId);\r\n\r\n    if (this.isBrowser) {\r\n      const savedYear = localStorage.getItem('selectedYear');\r\n      const savedMonth = localStorage.getItem('selectedMonth');\r\n\r\n      if (!savedYear || !savedMonth) {\r\n        const now = new Date();\r\n        const defaultYear = now.getFullYear().toString();\r\n        const defaultMonth = (now.getMonth() + 1).toString().padStart(2, '0');\r\n\r\n        localStorage.setItem('selectedYear', defaultYear);\r\n        localStorage.setItem('selectedMonth', defaultMonth);\r\n\r\n        this.yearSubject = new BehaviorSubject<string>(defaultYear);\r\n        this.monthSubject = new BehaviorSubject<string>(defaultMonth);\r\n      } else {\r\n        this.yearSubject = new BehaviorSubject<string>(savedYear);\r\n        this.monthSubject = new BehaviorSubject<string>(savedMonth);\r\n      }\r\n    } else {\r\n      // SSR fallback\r\n      this.yearSubject = new BehaviorSubject<string>('');\r\n      this.monthSubject = new BehaviorSubject<string>('');\r\n    }\r\n  }\r\n\r\n  get selectedYear$() {\r\n    return this.yearSubject.asObservable();\r\n  }\r\n\r\n  get selectedMonth$() {\r\n    return this.monthSubject.asObservable();\r\n  }\r\n\r\n  get selectedDate$() {\r\n    return combineLatest([this.selectedYear$, this.selectedMonth$]).pipe(\r\n      map(([year, month]) => ({ year, month }))\r\n    );\r\n  }\r\n\r\n  setDate(year: number, month: number): void {\r\n    const formattedMonth = month.toString().padStart(2, '0');\r\n    this.yearSubject.next(year.toString());\r\n    this.monthSubject.next(formattedMonth);\r\n\r\n    if (this.isBrowser) {\r\n      localStorage.setItem('selectedYear', year.toString());\r\n      localStorage.setItem('selectedMonth', formattedMonth);\r\n    }\r\n  }\r\n\r\n  getSelectedYear(): string {\r\n    return this.yearSubject.value;\r\n  }\r\n\r\n  getSelectedMonth(): string {\r\n    return this.monthSubject.value;\r\n  }\r\n\r\n  resetToCurrentDate(): void {\r\n    const now = new Date();\r\n    const year = now.getFullYear().toString();\r\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\r\n\r\n    this.yearSubject.next(year);\r\n    this.monthSubject.next(month);\r\n\r\n    if (this.isBrowser) {\r\n      localStorage.setItem('selectedYear', year);\r\n      localStorage.setItem('selectedMonth', month);\r\n    }\r\n  }\r\n\r\n  // método: Notificar nuevo mes al usuario\r\n  notifyMonthChange(uid: string, year: string, month: string): void {\r\n    const mes = this.getMonthName(month);\r\n    const mensaje = `Nuevo mes detectado: ${mes} ${year}`;\r\n    const url = `https://micartera-acd5b-default-rtdb.firebaseio.com/${uid}/notificaciones.json`;\r\n\r\n    const body = {\r\n      mensaje,\r\n      leido: false,\r\n      fecha: new Date().toLocaleString()\r\n    };\r\n\r\n    this.http.post(url, body).subscribe();\r\n  }\r\n\r\n  // método: Obtener nombre del mes en español\r\n  getMonthName(month: string): string {\r\n    const meses = [\r\n      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\r\n      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\r\n    ];\r\n    return meses[parseInt(month) - 1] || '';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}