{"ast":null,"code":"import { ref, set, get, remove } from 'firebase/database';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./date.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let TaskTypeService = /*#__PURE__*/(() => {\n  class TaskTypeService {\n    constructor(authService, dateService, http) {\n      this.authService = authService;\n      this.dateService = dateService;\n      this.http = http;\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\n    }\n    getPath() {\n      const user = this.authService.getUser();\n      console.log('[USER]', user); // <-- ESTE LOG\n      const year = this.dateService.getSelectedYear();\n      const month = this.dateService.getSelectedMonth();\n      return `${this.dbUrl}/${user?.id}/${year}/${month}/categorias`;\n    }\n    getAllTaskTypes() {\n      const url = `${this.getPath()}.json`;\n      console.log('[GET] URL:', url);\n      return this.http.get(url).pipe(map(response => {\n        console.log('[GET] Response:', response);\n        return response ? Object.keys(response) : [];\n      }));\n    }\n    // método para agregar tipo de tarea\n    addTaskType(nombre) {\n      const uid = this.auth.currentUser?.uid;\n      const fecha = new Date();\n      const year = fecha.getFullYear();\n      const month = ('0' + (fecha.getMonth() + 1)).slice(-2);\n      const path = `/${uid}/${year}/${month}/categorias/${nombre}`;\n      return set(ref(this.db, path), {\n        tareas: {}\n      });\n    }\n    deleteTaskType(nombre) {\n      const url = `${this.getPath()}/${nombre}.json`;\n      return this.http.delete(url);\n    }\n    // método para editar tipo de tarea\n    editTaskType(nombreAntiguo, nombreNuevo) {\n      const uid = this.auth.currentUser?.uid;\n      const fecha = new Date();\n      const year = fecha.getFullYear();\n      const month = ('0' + (fecha.getMonth() + 1)).slice(-2);\n      const basePath = `/${uid}/${year}/${month}/categorias`;\n      const oldRef = ref(this.db, `${basePath}/${nombreAntiguo}`);\n      const newRef = ref(this.db, `${basePath}/${nombreNuevo}`);\n      return get(oldRef).then(snapshot => {\n        const data = snapshot.val();\n        return set(newRef, data).then(() => remove(oldRef));\n      });\n    }\n    static #_ = this.ɵfac = function TaskTypeService_Factory(t) {\n      return new (t || TaskTypeService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.DateService), i0.ɵɵinject(i3.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskTypeService,\n      factory: TaskTypeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskTypeService;\n})();","map":{"version":3,"names":["ref","set","get","remove","map","TaskTypeService","constructor","authService","dateService","http","dbUrl","getPath","user","getUser","console","log","year","getSelectedYear","month","getSelectedMonth","id","getAllTaskTypes","url","pipe","response","Object","keys","addTaskType","nombre","uid","auth","currentUser","fecha","Date","getFullYear","getMonth","slice","path","db","tareas","deleteTaskType","delete","editTaskType","nombreAntiguo","nombreNuevo","basePath","oldRef","newRef","then","snapshot","data","val","_","i0","ɵɵinject","i1","AuthService","i2","DateService","i3","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// Servicio para gestionar tipos de tareas desde Firebase sin initializeApp\r\nimport { Injectable } from '@angular/core';\r\nimport { getDatabase, ref, set, get, remove } from 'firebase/database';\r\nimport { AuthService } from './auth.service';\r\nimport { Auth } from '@angular/fire/auth';\r\nimport { DateService } from './date.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskTypeService {\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private dateService: DateService,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  private getPath() {\r\n    const user = this.authService.getUser();\r\n    console.log('[USER]', user); // <-- ESTE LOG\r\n\r\n    const year = this.dateService.getSelectedYear();\r\n    const month = this.dateService.getSelectedMonth();\r\n\r\n    return `${this.dbUrl}/${user?.id}/${year}/${month}/categorias`;\r\n  }\r\n\r\n\r\n  getAllTaskTypes() {\r\n    const url = `${this.getPath()}.json`;\r\n    console.log('[GET] URL:', url);\r\n    return this.http.get<{ [key: string]: any }>(url).pipe(\r\n      map(response => {\r\n        console.log('[GET] Response:', response);\r\n        return response ? Object.keys(response) : [];\r\n      })\r\n    );\r\n  }\r\n\r\n// método para agregar tipo de tarea\r\naddTaskType(nombre: string): Promise<void> {\r\n  const uid = this.auth.currentUser?.uid;\r\n  const fecha = new Date();\r\n  const year = fecha.getFullYear();\r\n  const month = ('0' + (fecha.getMonth() + 1)).slice(-2);\r\n  const path = `/${uid}/${year}/${month}/categorias/${nombre}`;\r\n  return set(ref(this.db, path), { tareas: {} });\r\n}\r\n\r\n  deleteTaskType(nombre: string) {\r\n    const url = `${this.getPath()}/${nombre}.json`;\r\n    return this.http.delete(url);\r\n  }\r\n\r\n// método para editar tipo de tarea\r\neditTaskType(nombreAntiguo: string, nombreNuevo: string): Promise<void> {\r\n  const uid = this.auth.currentUser?.uid;\r\n  const fecha = new Date();\r\n  const year = fecha.getFullYear();\r\n  const month = ('0' + (fecha.getMonth() + 1)).slice(-2);\r\n  const basePath = `/${uid}/${year}/${month}/categorias`;\r\n\r\n  const oldRef = ref(this.db, `${basePath}/${nombreAntiguo}`);\r\n  const newRef = ref(this.db, `${basePath}/${nombreNuevo}`);\r\n\r\n  return get(oldRef).then(snapshot => {\r\n    const data = snapshot.val();\r\n    return set(newRef, data).then(() => remove(oldRef));\r\n  });\r\n}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}