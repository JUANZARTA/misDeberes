{"ast":null,"code":"import { __decorate } from \"tslib\";\n// Servicio para gestionar los tipos de tareas desde Firebase\nimport { Injectable } from '@angular/core';\nimport { getDatabase, ref, get, set, remove } from 'firebase/database';\nimport { from, map } from 'rxjs';\nlet TaskTypeService = class TaskTypeService {\n  constructor(auth) {\n    this.auth = auth;\n    this.db = getDatabase();\n  }\n  // Obtener ruta personalizada del usuario actual\n  getUserPath() {\n    const user = this.auth.currentUser;\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    return `${user?.uid}/${year}/${month}/categorias`;\n  }\n  // Obtener tipos de tareas existentes\n  getTaskTypes() {\n    const path = this.getUserPath();\n    return from(get(ref(this.db, path))).pipe(map(snapshot => {\n      const data = snapshot.val();\n      return data ? Object.keys(data) : [];\n    }));\n  }\n  // Agregar nuevo tipo de tarea\n  addTaskType(name) {\n    const path = `${this.getUserPath()}/${name}`;\n    return set(ref(this.db, path), {\n      tareas: {}\n    });\n  }\n  // Editar nombre de tipo de tarea\n  editTaskType(oldName, newName) {\n    const basePath = this.getUserPath();\n    const oldRef = ref(this.db, `${basePath}/${oldName}`);\n    const newRef = ref(this.db, `${basePath}/${newName}`);\n    return get(oldRef).then(snapshot => {\n      const data = snapshot.val();\n      return set(newRef, data).then(() => remove(oldRef));\n    });\n  }\n  // Eliminar tipo de tarea\n  deleteTaskType(name) {\n    const path = `${this.getUserPath()}/${name}`;\n    return remove(ref(this.db, path));\n  }\n};\nTaskTypeService = __decorate([Injectable({\n  providedIn: 'root'\n})], TaskTypeService);\nexport { TaskTypeService };","map":{"version":3,"names":["Injectable","getDatabase","ref","get","set","remove","from","map","TaskTypeService","constructor","auth","db","getUserPath","user","currentUser","date","Date","year","getFullYear","month","getMonth","toString","padStart","uid","getTaskTypes","path","pipe","snapshot","data","val","Object","keys","addTaskType","name","tareas","editTaskType","oldName","newName","basePath","oldRef","newRef","then","deleteTaskType","__decorate","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// Servicio para gestionar los tipos de tareas desde Firebase\r\nimport { Injectable } from '@angular/core';\r\nimport { getDatabase, ref, get, set, remove } from 'firebase/database';\r\nimport { Auth } from '@angular/fire/auth';\r\nimport { from, map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskTypeService {\r\n  private db = getDatabase();\r\n\r\n  constructor(private auth: Auth) {}\r\n\r\n  // Obtener ruta personalizada del usuario actual\r\n  private getUserPath(): string {\r\n    const user = this.auth.currentUser;\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    return `${user?.uid}/${year}/${month}/categorias`;\r\n  }\r\n\r\n  // Obtener tipos de tareas existentes\r\n  getTaskTypes() {\r\n    const path = this.getUserPath();\r\n    return from(get(ref(this.db, path))).pipe(\r\n      map(snapshot => {\r\n        const data = snapshot.val();\r\n        return data ? Object.keys(data) : [];\r\n      })\r\n    );\r\n  }\r\n\r\n  // Agregar nuevo tipo de tarea\r\n  addTaskType(name: string) {\r\n    const path = `${this.getUserPath()}/${name}`;\r\n    return set(ref(this.db, path), { tareas: {} });\r\n  }\r\n\r\n  // Editar nombre de tipo de tarea\r\n  editTaskType(oldName: string, newName: string) {\r\n    const basePath = this.getUserPath();\r\n    const oldRef = ref(this.db, `${basePath}/${oldName}`);\r\n    const newRef = ref(this.db, `${basePath}/${newName}`);\r\n\r\n    return get(oldRef).then(snapshot => {\r\n      const data = snapshot.val();\r\n      return set(newRef, data).then(() => remove(oldRef));\r\n    });\r\n  }\r\n\r\n  // Eliminar tipo de tarea\r\n  deleteTaskType(name: string) {\r\n    const path = `${this.getUserPath()}/${name}`;\r\n    return remove(ref(this.db, path));\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AAEtE,SAASC,IAAI,EAAEC,GAAG,QAAQ,MAAM;AAKzB,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YAAoBC,IAAU;IAAV,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,EAAE,GAAGV,WAAW,EAAE;EAEO;EAEjC;EACQW,WAAWA,CAAA;IACjB,MAAMC,IAAI,GAAG,IAAI,CAACH,IAAI,CAACI,WAAW;IAClC,MAAMC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvB,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAW,EAAE;IAC/B,MAAMC,KAAK,GAAG,CAACJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC/D,OAAO,GAAGT,IAAI,EAAEU,GAAG,IAAIN,IAAI,IAAIE,KAAK,aAAa;EACnD;EAEA;EACAK,YAAYA,CAAA;IACV,MAAMC,IAAI,GAAG,IAAI,CAACb,WAAW,EAAE;IAC/B,OAAON,IAAI,CAACH,GAAG,CAACD,GAAG,CAAC,IAAI,CAACS,EAAE,EAAEc,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CACvCnB,GAAG,CAACoB,QAAQ,IAAG;MACb,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,EAAE;MAC3B,OAAOD,IAAI,GAAGE,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,GAAG,EAAE;IACtC,CAAC,CAAC,CACH;EACH;EAEA;EACAI,WAAWA,CAACC,IAAY;IACtB,MAAMR,IAAI,GAAG,GAAG,IAAI,CAACb,WAAW,EAAE,IAAIqB,IAAI,EAAE;IAC5C,OAAO7B,GAAG,CAACF,GAAG,CAAC,IAAI,CAACS,EAAE,EAAEc,IAAI,CAAC,EAAE;MAAES,MAAM,EAAE;IAAE,CAAE,CAAC;EAChD;EAEA;EACAC,YAAYA,CAACC,OAAe,EAAEC,OAAe;IAC3C,MAAMC,QAAQ,GAAG,IAAI,CAAC1B,WAAW,EAAE;IACnC,MAAM2B,MAAM,GAAGrC,GAAG,CAAC,IAAI,CAACS,EAAE,EAAE,GAAG2B,QAAQ,IAAIF,OAAO,EAAE,CAAC;IACrD,MAAMI,MAAM,GAAGtC,GAAG,CAAC,IAAI,CAACS,EAAE,EAAE,GAAG2B,QAAQ,IAAID,OAAO,EAAE,CAAC;IAErD,OAAOlC,GAAG,CAACoC,MAAM,CAAC,CAACE,IAAI,CAACd,QAAQ,IAAG;MACjC,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,EAAE;MAC3B,OAAOzB,GAAG,CAACoC,MAAM,EAAEZ,IAAI,CAAC,CAACa,IAAI,CAAC,MAAMpC,MAAM,CAACkC,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAEA;EACAG,cAAcA,CAACT,IAAY;IACzB,MAAMR,IAAI,GAAG,GAAG,IAAI,CAACb,WAAW,EAAE,IAAIqB,IAAI,EAAE;IAC5C,OAAO5B,MAAM,CAACH,GAAG,CAAC,IAAI,CAACS,EAAE,EAAEc,IAAI,CAAC,CAAC;EACnC;CACD;AAhDYjB,eAAe,GAAAmC,UAAA,EAH3B3C,UAAU,CAAC;EACV4C,UAAU,EAAE;CACb,CAAC,C,EACWpC,eAAe,CAgD3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}