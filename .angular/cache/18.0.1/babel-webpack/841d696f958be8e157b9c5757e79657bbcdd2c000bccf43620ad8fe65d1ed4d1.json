{"ast":null,"code":"// Servicio para gestionar los tipos de tareas desde Firebase\nimport { inject } from '@angular/core';\nimport { getDatabase, ref, get, set, remove } from 'firebase/database';\nimport { Auth } from '@angular/fire/auth';\nimport { from, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let TaskTypeService = /*#__PURE__*/(() => {\n  class TaskTypeService {\n    constructor() {\n      // Inyección de dependencias usando inject() en lugar del constructor\n      this.auth = inject(Auth);\n      this.db = getDatabase();\n    }\n    // Obtener ruta personalizada del usuario actual\n    getUserPath() {\n      const user = this.auth.currentUser;\n      const date = new Date();\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      return `${user?.uid}/${year}/${month}/categorias`;\n    }\n    // Obtener tipos de tareas existentes\n    getTaskTypes() {\n      const path = this.getUserPath();\n      return from(get(ref(this.db, path))).pipe(map(snapshot => {\n        const data = snapshot.val();\n        return data ? Object.keys(data) : [];\n      }));\n    }\n    // Agregar nuevo tipo de tarea\n    addTaskType(name) {\n      const path = `${this.getUserPath()}/${name}`;\n      return set(ref(this.db, path), {\n        tareas: {}\n      });\n    }\n    // Editar nombre de tipo de tarea\n    editTaskType(oldName, newName) {\n      const basePath = this.getUserPath();\n      const oldRef = ref(this.db, `${basePath}/${oldName}`);\n      const newRef = ref(this.db, `${basePath}/${newName}`);\n      return get(oldRef).then(snapshot => {\n        const data = snapshot.val();\n        return set(newRef, data).then(() => remove(oldRef));\n      });\n    }\n    // Eliminar tipo de tarea\n    deleteTaskType(name) {\n      const path = `${this.getUserPath()}/${name}`;\n      return remove(ref(this.db, path));\n    }\n    static #_ = this.ɵfac = function TaskTypeService_Factory(t) {\n      return new (t || TaskTypeService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskTypeService,\n      factory: TaskTypeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskTypeService;\n})();","map":{"version":3,"names":["inject","getDatabase","ref","get","set","remove","Auth","from","map","TaskTypeService","constructor","auth","db","getUserPath","user","currentUser","date","Date","year","getFullYear","month","getMonth","toString","padStart","uid","getTaskTypes","path","pipe","snapshot","data","val","Object","keys","addTaskType","name","tareas","editTaskType","oldName","newName","basePath","oldRef","newRef","then","deleteTaskType","_","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// Servicio para gestionar los tipos de tareas desde Firebase\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { getDatabase, ref, get, set, remove } from 'firebase/database';\r\nimport { Auth } from '@angular/fire/auth';\r\nimport { from, map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskTypeService {\r\n  // Inyección de dependencias usando inject() en lugar del constructor\r\n  private auth = inject(Auth);\r\n  private db = getDatabase();\r\n\r\n  // Obtener ruta personalizada del usuario actual\r\n  private getUserPath(): string {\r\n    const user = this.auth.currentUser;\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    return `${user?.uid}/${year}/${month}/categorias`;\r\n  }\r\n\r\n  // Obtener tipos de tareas existentes\r\n  getTaskTypes() {\r\n    const path = this.getUserPath();\r\n    return from(get(ref(this.db, path))).pipe(\r\n      map(snapshot => {\r\n        const data = snapshot.val();\r\n        return data ? Object.keys(data) : [];\r\n      })\r\n    );\r\n  }\r\n\r\n  // Agregar nuevo tipo de tarea\r\n  addTaskType(name: string) {\r\n    const path = `${this.getUserPath()}/${name}`;\r\n    return set(ref(this.db, path), { tareas: {} });\r\n  }\r\n\r\n  // Editar nombre de tipo de tarea\r\n  editTaskType(oldName: string, newName: string) {\r\n    const basePath = this.getUserPath();\r\n    const oldRef = ref(this.db, `${basePath}/${oldName}`);\r\n    const newRef = ref(this.db, `${basePath}/${newName}`);\r\n\r\n    return get(oldRef).then(snapshot => {\r\n      const data = snapshot.val();\r\n      return set(newRef, data).then(() => remove(oldRef));\r\n    });\r\n  }\r\n\r\n  // Eliminar tipo de tarea\r\n  deleteTaskType(name: string) {\r\n    const path = `${this.getUserPath()}/${name}`;\r\n    return remove(ref(this.db, path));\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AACtE,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,IAAI,EAAEC,GAAG,QAAQ,MAAM;;AAKhC,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAH5BC,YAAA;MAIE;MACQ,KAAAC,IAAI,GAAGX,MAAM,CAACM,IAAI,CAAC;MACnB,KAAAM,EAAE,GAAGX,WAAW,EAAE;;IAE1B;IACQY,WAAWA,CAAA;MACjB,MAAMC,IAAI,GAAG,IAAI,CAACH,IAAI,CAACI,WAAW;MAClC,MAAMC,IAAI,GAAG,IAAIC,IAAI,EAAE;MACvB,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAW,EAAE;MAC/B,MAAMC,KAAK,GAAG,CAACJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC/D,OAAO,GAAGT,IAAI,EAAEU,GAAG,IAAIN,IAAI,IAAIE,KAAK,aAAa;IACnD;IAEA;IACAK,YAAYA,CAAA;MACV,MAAMC,IAAI,GAAG,IAAI,CAACb,WAAW,EAAE;MAC/B,OAAON,IAAI,CAACJ,GAAG,CAACD,GAAG,CAAC,IAAI,CAACU,EAAE,EAAEc,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CACvCnB,GAAG,CAACoB,QAAQ,IAAG;QACb,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,EAAE;QAC3B,OAAOD,IAAI,GAAGE,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,GAAG,EAAE;MACtC,CAAC,CAAC,CACH;IACH;IAEA;IACAI,WAAWA,CAACC,IAAY;MACtB,MAAMR,IAAI,GAAG,GAAG,IAAI,CAACb,WAAW,EAAE,IAAIqB,IAAI,EAAE;MAC5C,OAAO9B,GAAG,CAACF,GAAG,CAAC,IAAI,CAACU,EAAE,EAAEc,IAAI,CAAC,EAAE;QAAES,MAAM,EAAE;MAAE,CAAE,CAAC;IAChD;IAEA;IACAC,YAAYA,CAACC,OAAe,EAAEC,OAAe;MAC3C,MAAMC,QAAQ,GAAG,IAAI,CAAC1B,WAAW,EAAE;MACnC,MAAM2B,MAAM,GAAGtC,GAAG,CAAC,IAAI,CAACU,EAAE,EAAE,GAAG2B,QAAQ,IAAIF,OAAO,EAAE,CAAC;MACrD,MAAMI,MAAM,GAAGvC,GAAG,CAAC,IAAI,CAACU,EAAE,EAAE,GAAG2B,QAAQ,IAAID,OAAO,EAAE,CAAC;MAErD,OAAOnC,GAAG,CAACqC,MAAM,CAAC,CAACE,IAAI,CAACd,QAAQ,IAAG;QACjC,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,EAAE;QAC3B,OAAO1B,GAAG,CAACqC,MAAM,EAAEZ,IAAI,CAAC,CAACa,IAAI,CAAC,MAAMrC,MAAM,CAACmC,MAAM,CAAC,CAAC;MACrD,CAAC,CAAC;IACJ;IAEA;IACAG,cAAcA,CAACT,IAAY;MACzB,MAAMR,IAAI,GAAG,GAAG,IAAI,CAACb,WAAW,EAAE,IAAIqB,IAAI,EAAE;MAC5C,OAAO7B,MAAM,CAACH,GAAG,CAAC,IAAI,CAACU,EAAE,EAAEc,IAAI,CAAC,CAAC;IACnC;IAAC,QAAAkB,CAAA,G;uBA/CUnC,eAAe;IAAA;IAAA,QAAAoC,EAAA,G;aAAfpC,eAAe;MAAAqC,OAAA,EAAfrC,eAAe,CAAAsC,IAAA;MAAAC,UAAA,EAFd;IAAM;;SAEPvC,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}