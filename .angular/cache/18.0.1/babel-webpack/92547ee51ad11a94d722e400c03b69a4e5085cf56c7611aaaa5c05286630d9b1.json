{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/taskType.service\";\nimport * as i2 from \"@angular/router\";\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(taskTypeService, router) {\n      this.taskTypeService = taskTypeService;\n      this.router = router;\n      // Lista de tipos de tareas\n      this.taskTypes = [];\n      // Estado del modal para crear tipo\n      this.isModalOpen = false;\n      // Nuevo tipo de tarea\n      this.newTaskType = '';\n      // Modal lateral: editar\n      this.isEditModalOpen = false;\n      this.taskTypeToEdit = '';\n      this.editedTaskType = '';\n      // Modal lateral: eliminar\n      this.isDeleteModalOpen = false;\n      this.taskTypeToDelete = '';\n    }\n    // Carga inicial de tipos al entrar al componente\n    ngOnInit() {\n      console.log('[INIT] Home cargado');\n      this.loadTaskTypes();\n    }\n    // Consulta todos los tipos de tareas existentes\n    loadTaskTypes() {\n      this.taskTypeService.getAllTaskTypes().subscribe({\n        next: types => {\n          console.log('[GET] Tipos cargados:', types);\n          this.taskTypes = types;\n        },\n        error: err => {\n          console.error('[ERROR] Al obtener tipos de tarea:', err);\n        }\n      });\n    }\n    // Abre el modal de creación\n    openModal() {\n      this.isModalOpen = true;\n    }\n    // Cierra el modal de creación\n    closeModal() {\n      this.isModalOpen = false;\n      this.newTaskType = '';\n    }\n    // Agrega un nuevo tipo de tarea\n    addTaskType() {\n      if (this.newTaskType.trim()) {\n        this.taskTypeService.addTaskType(this.newTaskType).subscribe({\n          next: () => {\n            this.loadTaskTypes();\n            this.closeModal();\n          },\n          error: err => {\n            console.error('[ERROR] Al agregar tipo:', err);\n          }\n        });\n      }\n    }\n    // Redirige a la vista de categorías según el tipo\n    enterTaskType(type) {\n      this.router.navigate(['/app/category', type.key]);\n    }\n    // ------------------ MODAL DE EDICIÓN ------------------\n    openEditModal(task) {\n      this.taskTypeToEdit = task.key;\n      this.editedTaskType = task.nombre;\n      this.isEditModalOpen = true;\n    }\n    closeEditModal() {\n      this.isEditModalOpen = false;\n      this.editedTaskType = '';\n      this.taskTypeToEdit = '';\n    }\n    saveTaskTypeEdit() {\n      if (this.editedTaskType.trim() && this.taskTypeToEdit) {\n        this.taskTypeService.editTaskType(this.taskTypeToEdit, this.editedTaskType).subscribe({\n          next: () => {\n            this.loadTaskTypes();\n            this.closeEditModal();\n          },\n          error: err => console.error('[ERROR] Al editar tipo:', err)\n        });\n      }\n    }\n    // ------------------ MODAL DE ELIMINACIÓN ------------------\n    openDeleteModal(task) {\n      this.taskTypeToDelete = task.key;\n      this.isDeleteModalOpen = true;\n    }\n    closeDeleteModal() {\n      this.taskTypeToDelete = '';\n      this.isDeleteModalOpen = false;\n    }\n    confirmDeleteTaskType() {\n      if (this.taskTypeToDelete) {\n        this.taskTypeService.deleteTaskType(this.taskTypeToDelete).subscribe({\n          next: () => {\n            this.loadTaskTypes();\n            this.closeDeleteModal();\n          },\n          error: err => console.error('[ERROR] Al eliminar tipo:', err)\n        });\n      }\n    }\n    static #_ = this.ɵfac = function HomeComponent_Factory(t) {\n      return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.TaskTypeService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HomeComponent,\n      selectors: [[\"app-home\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 1,\n      consts: [[1, \"text-lg\", \"font-semibold\"]],\n      template: function HomeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h3\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(2, \"\\n...\\n(click)=\\\"openEditModal(taskType)\\\"\\n(click)=\\\"openDeleteModal(taskType)\\\"\\n(click)=\\\"enterTaskType(taskType)\\\"\\n\");\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.taskType.nombre);\n        }\n      },\n      dependencies: [CommonModule, FormsModule],\n      encapsulation: 2\n    });\n  }\n  return HomeComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","HomeComponent","constructor","taskTypeService","router","taskTypes","isModalOpen","newTaskType","isEditModalOpen","taskTypeToEdit","editedTaskType","isDeleteModalOpen","taskTypeToDelete","ngOnInit","console","log","loadTaskTypes","getAllTaskTypes","subscribe","next","types","error","err","openModal","closeModal","addTaskType","trim","enterTaskType","type","navigate","key","openEditModal","task","nombre","closeEditModal","saveTaskTypeEdit","editTaskType","openDeleteModal","closeDeleteModal","confirmDeleteTaskType","deleteTaskType","_","i0","ɵɵdirectiveInject","i1","TaskTypeService","i2","Router","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","HomeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","taskType","encapsulation"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\pages\\home\\home.component.ts","E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["// Home para visualizar, crear, editar y eliminar tipos de tarea\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TaskTypeService } from '../../services/taskType.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  templateUrl: './home.component.html',\r\n  styleUrls: [],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class HomeComponent {\r\n\r\n  // Lista de tipos de tareas\r\n  taskTypes: { key: string, nombre: string }[] = [];\r\n\r\n  // Estado del modal para crear tipo\r\n  isModalOpen = false;\r\n\r\n  // Nuevo tipo de tarea\r\n  newTaskType = '';\r\n\r\n  // Modal lateral: editar\r\n  isEditModalOpen: boolean = false;\r\n  taskTypeToEdit: string = '';\r\n  editedTaskType: string = '';\r\n\r\n  // Modal lateral: eliminar\r\n  isDeleteModalOpen: boolean = false;\r\n  taskTypeToDelete: string = '';\r\n\r\n  constructor(\r\n    private taskTypeService: TaskTypeService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Carga inicial de tipos al entrar al componente\r\n  ngOnInit(): void {\r\n    console.log('[INIT] Home cargado');\r\n    this.loadTaskTypes();\r\n  }\r\n\r\n  // Consulta todos los tipos de tareas existentes\r\n  loadTaskTypes(): void {\r\n    this.taskTypeService.getAllTaskTypes().subscribe({\r\n      next: (types) => {\r\n        console.log('[GET] Tipos cargados:', types);\r\n        this.taskTypes = types;\r\n      },\r\n      error: (err) => {\r\n        console.error('[ERROR] Al obtener tipos de tarea:', err);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Abre el modal de creación\r\n  openModal(): void {\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  // Cierra el modal de creación\r\n  closeModal(): void {\r\n    this.isModalOpen = false;\r\n    this.newTaskType = '';\r\n  }\r\n\r\n  // Agrega un nuevo tipo de tarea\r\n  addTaskType(): void {\r\n    if (this.newTaskType.trim()) {\r\n      this.taskTypeService.addTaskType(this.newTaskType).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeModal();\r\n        },\r\n        error: (err) => {\r\n          console.error('[ERROR] Al agregar tipo:', err);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // Redirige a la vista de categorías según el tipo\r\n  enterTaskType(type: any): void {\r\n    this.router.navigate(['/app/category', type.key]);\r\n  }\r\n\r\n  // ------------------ MODAL DE EDICIÓN ------------------\r\n\r\n  openEditModal(task: { key: string, nombre: string }): void {\r\n    this.taskTypeToEdit = task.key;\r\n    this.editedTaskType = task.nombre;\r\n    this.isEditModalOpen = true;\r\n  }\r\n\r\n  closeEditModal(): void {\r\n    this.isEditModalOpen = false;\r\n    this.editedTaskType = '';\r\n    this.taskTypeToEdit = '';\r\n  }\r\n\r\n  saveTaskTypeEdit(): void {\r\n    if (this.editedTaskType.trim() && this.taskTypeToEdit) {\r\n      this.taskTypeService.editTaskType(this.taskTypeToEdit, this.editedTaskType).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeEditModal();\r\n        },\r\n        error: (err) => console.error('[ERROR] Al editar tipo:', err)\r\n      });\r\n    }\r\n  }\r\n\r\n  // ------------------ MODAL DE ELIMINACIÓN ------------------\r\n\r\n  openDeleteModal(task: { key: string, nombre: string }): void {\r\n    this.taskTypeToDelete = task.key;\r\n    this.isDeleteModalOpen = true;\r\n  }\r\n\r\n  closeDeleteModal(): void {\r\n    this.taskTypeToDelete = '';\r\n    this.isDeleteModalOpen = false;\r\n  }\r\n\r\n  confirmDeleteTaskType(): void {\r\n    if (this.taskTypeToDelete) {\r\n      this.taskTypeService.deleteTaskType(this.taskTypeToDelete).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeDeleteModal();\r\n        },\r\n        error: (err) => console.error('[ERROR] Al eliminar tipo:', err)\r\n      });\r\n    }\r\n  }\r\n}\r\n","<h3 class=\"text-lg font-semibold\">{{ taskType.nombre }}</h3>\r\n...\r\n(click)=\"openEditModal(taskType)\"\r\n(click)=\"openDeleteModal(taskType)\"\r\n(click)=\"enterTaskType(taskType)\"\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}