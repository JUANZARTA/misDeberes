{"ast":null,"code":"import { throwError, forkJoin, of } from 'rxjs';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiKey = 'AIzaSyCXaTov5g6_qWHoxHdI39tLzEH7VQx5ttw';\n      this.baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com'; // Reemplaza si tu URL es otra\n    }\n    login(email, password) {\n      const url = `${this.baseUrl}:signInWithPassword?key=${this.apiKey}`;\n      const body = {\n        email,\n        password,\n        returnSecureToken: true\n      };\n      return this.http.post(url, body).pipe(tap(res => localStorage.setItem('user', JSON.stringify(res))), catchError(err => throwError(() => err.error.error.message)));\n    }\n    logout() {\n      localStorage.removeItem('user');\n      localStorage.removeItem('selectedYear');\n      localStorage.removeItem('selectedMonth');\n    }\n    isLoggedIn() {\n      return !!localStorage.getItem('user');\n    }\n    getUser() {\n      const data = localStorage.getItem('user');\n      if (!data) return null;\n      const parsed = JSON.parse(data);\n      // ðŸ”§ Soporte para sesiones que todavÃ­a tienen localId\n      return {\n        id: parsed.id || parsed.localId,\n        email: parsed.email\n      };\n    }\n    register(email, password) {\n      const url = `${this.baseUrl}:signUp?key=${this.apiKey}`;\n      const body = {\n        email,\n        password,\n        returnSecureToken: true\n      };\n      return this.http.post(url, body).pipe(tap(res => localStorage.setItem('user', JSON.stringify(res))), catchError(err => throwError(() => err.error.error.message)));\n    }\n    saveUserProfile(userId, name, correo) {\n      const url = `${this.dbUrl}/${userId}.json`;\n      return this.http.put(url, {\n        nombre: name,\n        correo: correo,\n        notificaciones: {\n          \"-notif1\": {\n            mensaje: \"Bienvenido a MisDeberes\",\n            leido: false,\n            fecha: new Date().toLocaleString()\n          }\n        }\n      }).pipe(tap(() => {\n        const storedUser = JSON.parse(localStorage.getItem('user') || '{}');\n        storedUser.name = name;\n        localStorage.setItem('user', JSON.stringify(storedUser));\n      }), catchError(() => throwError(() => 'Error al guardar perfil')));\n    }\n    getUserData(uid) {\n      const url = `${this.dbUrl}/${uid}.json`;\n      return this.http.get(url);\n    }\n    getUserNotifications(uid) {\n      const url = `${this.dbUrl}/${uid}/notificaciones.json`;\n      return this.http.get(url);\n    }\n    markNotificationAsRead(uid, notifId) {\n      const url = `${this.dbUrl}/${uid}/notificaciones/${notifId}/leido.json`;\n      return this.http.put(url, true);\n    }\n    addNotification(uid, mensaje) {\n      const notificacionesUrl = `${this.dbUrl}/${uid}/notificaciones.json`;\n      return this.getUserNotifications(uid).pipe(switchMap(data => {\n        const allNotifs = data ? Object.entries(data) : [];\n        const total = allNotifs.length;\n        if (total >= 20) {\n          const sorted = allNotifs.sort((a, b) => new Date(a[1].fecha).getTime() - new Date(b[1].fecha).getTime());\n          const oldestKey = sorted[0][0];\n          const deleteUrl = `${this.dbUrl}/${uid}/notificaciones/${oldestKey}.json`;\n          return this.http.delete(deleteUrl).pipe(switchMap(() => {\n            return this.http.post(notificacionesUrl, {\n              mensaje,\n              leido: false,\n              fecha: new Date().toLocaleString()\n            });\n          }));\n        } else {\n          return this.http.post(notificacionesUrl, {\n            mensaje,\n            leido: false,\n            fecha: new Date().toLocaleString()\n          });\n        }\n      }));\n    }\n    cleanOldNotifications(uid) {\n      return this.getUserNotifications(uid).pipe(switchMap(data => {\n        if (!data) return of(null);\n        const now = new Date();\n        const deletions = Object.entries(data).filter(([_, notif]) => {\n          const fecha = new Date(notif.fecha);\n          const diffDays = Math.floor((now.getTime() - fecha.getTime()) / (1000 * 60 * 60 * 24));\n          return diffDays >= 7;\n        }).map(([key]) => {\n          const delUrl = `${this.dbUrl}/${uid}/notificaciones/${key}.json`;\n          return this.http.delete(delUrl);\n        });\n        return deletions.length > 0 ? forkJoin(deletions) : of(null);\n      }));\n    }\n    // MÃ©todo para guardar sesiÃ³n local del usuario autenticado\n    guardarSesion(userId, email) {\n      localStorage.setItem('user', JSON.stringify({\n        id: userId,\n        email\n      }));\n    }\n    static #_ = this.Éµfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ÉµÉµinject(i1.HttpClient));\n    };\n    static #_2 = this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: AuthService,\n      factory: AuthService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["throwError","forkJoin","of","catchError","tap","switchMap","AuthService","constructor","http","apiKey","baseUrl","dbUrl","login","email","password","url","body","returnSecureToken","post","pipe","res","localStorage","setItem","JSON","stringify","err","error","message","logout","removeItem","isLoggedIn","getItem","getUser","data","parsed","parse","id","localId","register","saveUserProfile","userId","name","correo","put","nombre","notificaciones","mensaje","leido","fecha","Date","toLocaleString","storedUser","getUserData","uid","get","getUserNotifications","markNotificationAsRead","notifId","addNotification","notificacionesUrl","allNotifs","Object","entries","total","length","sorted","sort","a","b","getTime","oldestKey","deleteUrl","delete","cleanOldNotifications","now","deletions","filter","_","notif","diffDays","Math","floor","map","key","delUrl","guardarSesion","i0","ÉµÉµinject","i1","HttpClient","_2","factory","Éµfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError, forkJoin, of } from 'rxjs';\r\nimport { catchError, tap, map, switchMap } from 'rxjs/operators';\r\n\r\nexport interface Notificacion {\r\n  mensaje: string;\r\n  leido: boolean;\r\n  fecha: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiKey = 'AIzaSyCXaTov5g6_qWHoxHdI39tLzEH7VQx5ttw';\r\n  private baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com'; // Reemplaza si tu URL es otra\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const url = `${this.baseUrl}:signInWithPassword?key=${this.apiKey}`;\r\n    const body = { email, password, returnSecureToken: true };\r\n\r\n    return this.http.post(url, body).pipe(\r\n      tap((res: any) => localStorage.setItem('user', JSON.stringify(res))),\r\n      catchError(err => throwError(() => err.error.error.message))\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('selectedYear');\r\n    localStorage.removeItem('selectedMonth');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('user');\r\n  }\r\n  \r\n  getUser() {\r\n    const data = localStorage.getItem('user');\r\n    if (!data) return null;\r\n\r\n    const parsed = JSON.parse(data);\r\n\r\n    // ðŸ”§ Soporte para sesiones que todavÃ­a tienen localId\r\n    return {\r\n      id: parsed.id || parsed.localId,\r\n      email: parsed.email\r\n    };\r\n  }\r\n\r\n\r\n\r\n  register(email: string, password: string): Observable<any> {\r\n    const url = `${this.baseUrl}:signUp?key=${this.apiKey}`;\r\n    const body = { email, password, returnSecureToken: true };\r\n\r\n    return this.http.post(url, body).pipe(\r\n      tap((res: any) => localStorage.setItem('user', JSON.stringify(res))),\r\n      catchError(err => throwError(() => err.error.error.message))\r\n    );\r\n  }\r\n\r\n  saveUserProfile(userId: string, name: string, correo: string): Observable<any> {\r\n    const url = `${this.dbUrl}/${userId}.json`;\r\n\r\n    return this.http.put(url, {\r\n      nombre: name,\r\n      correo: correo,\r\n      notificaciones: {\r\n        \"-notif1\": {\r\n          mensaje: \"Bienvenido a MisDeberes\",\r\n          leido: false,\r\n          fecha: new Date().toLocaleString()\r\n        }\r\n      }\r\n    }).pipe(\r\n      tap(() => {\r\n        const storedUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n        storedUser.name = name;\r\n        localStorage.setItem('user', JSON.stringify(storedUser));\r\n      }),\r\n      catchError(() => throwError(() => 'Error al guardar perfil'))\r\n    );\r\n  }\r\n\r\n  getUserData(uid: string): Observable<any> {\r\n    const url = `${this.dbUrl}/${uid}.json`;\r\n    return this.http.get<any>(url);\r\n  }\r\n\r\n  getUserNotifications(uid: string): Observable<Record<string, Notificacion>> {\r\n    const url = `${this.dbUrl}/${uid}/notificaciones.json`;\r\n    return this.http.get<Record<string, Notificacion>>(url);\r\n  }\r\n\r\n  markNotificationAsRead(uid: string, notifId: string): Observable<any> {\r\n    const url = `${this.dbUrl}/${uid}/notificaciones/${notifId}/leido.json`;\r\n    return this.http.put(url, true);\r\n  }\r\n\r\n  addNotification(uid: string, mensaje: string): Observable<any> {\r\n    const notificacionesUrl = `${this.dbUrl}/${uid}/notificaciones.json`;\r\n\r\n    return this.getUserNotifications(uid).pipe(\r\n      switchMap((data) => {\r\n        const allNotifs = data ? Object.entries(data) : [];\r\n        const total = allNotifs.length;\r\n\r\n        if (total >= 20) {\r\n          const sorted = allNotifs.sort((a, b) =>\r\n            new Date(a[1].fecha).getTime() - new Date(b[1].fecha).getTime()\r\n          );\r\n          const oldestKey = sorted[0][0];\r\n\r\n          const deleteUrl = `${this.dbUrl}/${uid}/notificaciones/${oldestKey}.json`;\r\n          return this.http.delete(deleteUrl).pipe(\r\n            switchMap(() => {\r\n              return this.http.post(notificacionesUrl, {\r\n                mensaje,\r\n                leido: false,\r\n                fecha: new Date().toLocaleString()\r\n              });\r\n            })\r\n          );\r\n        } else {\r\n          return this.http.post(notificacionesUrl, {\r\n            mensaje,\r\n            leido: false,\r\n            fecha: new Date().toLocaleString()\r\n          });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  cleanOldNotifications(uid: string): Observable<any> {\r\n    return this.getUserNotifications(uid).pipe(\r\n      switchMap((data) => {\r\n        if (!data) return of(null);\r\n\r\n        const now = new Date();\r\n        const deletions = Object.entries(data)\r\n          .filter(([_, notif]) => {\r\n            const fecha = new Date(notif.fecha);\r\n            const diffDays = Math.floor((now.getTime() - fecha.getTime()) / (1000 * 60 * 60 * 24));\r\n            return diffDays >= 7;\r\n          })\r\n          .map(([key]) => {\r\n            const delUrl = `${this.dbUrl}/${uid}/notificaciones/${key}.json`;\r\n            return this.http.delete(delUrl);\r\n          });\r\n\r\n        return deletions.length > 0 ? forkJoin(deletions) : of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  // MÃ©todo para guardar sesiÃ³n local del usuario autenticado\r\nguardarSesion(userId: string, email: string): void {\r\n  localStorage.setItem('user', JSON.stringify({\r\n    id: userId,\r\n    email\r\n  }));\r\n}\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,QAAQ,EAAEC,EAAE,QAAQ,MAAM;AAC3D,SAASC,UAAU,EAAEC,GAAG,EAAOC,SAAS,QAAQ,gBAAgB;;;AAWhE,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAKtBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAJhB,KAAAC,MAAM,GAAG,yCAAyC;MAClD,KAAAC,OAAO,GAAG,oDAAoD;MAC9D,KAAAC,KAAK,GAAG,sDAAsD,CAAC,CAAC;IAEjC;IAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;MACnC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,2BAA2B,IAAI,CAACD,MAAM,EAAE;MACnE,MAAMO,IAAI,GAAG;QAAEH,KAAK;QAAEC,QAAQ;QAAEG,iBAAiB,EAAE;MAAI,CAAE;MAEzD,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAACH,GAAG,EAAEC,IAAI,CAAC,CAACG,IAAI,CACnCf,GAAG,CAAEgB,GAAQ,IAAKC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC,CAAC,EACpEjB,UAAU,CAACsB,GAAG,IAAIzB,UAAU,CAAC,MAAMyB,GAAG,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC,CAAC,CAC7D;IACH;IAEAC,MAAMA,CAAA;MACJP,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;MAC/BR,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;MACvCR,YAAY,CAACQ,UAAU,CAAC,eAAe,CAAC;IAC1C;IAEAC,UAAUA,CAAA;MACR,OAAO,CAAC,CAACT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IACvC;IAEAC,OAAOA,CAAA;MACL,MAAMC,IAAI,GAAGZ,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;MACzC,IAAI,CAACE,IAAI,EAAE,OAAO,IAAI;MAEtB,MAAMC,MAAM,GAAGX,IAAI,CAACY,KAAK,CAACF,IAAI,CAAC;MAE/B;MACA,OAAO;QACLG,EAAE,EAAEF,MAAM,CAACE,EAAE,IAAIF,MAAM,CAACG,OAAO;QAC/BxB,KAAK,EAAEqB,MAAM,CAACrB;OACf;IACH;IAIAyB,QAAQA,CAACzB,KAAa,EAAEC,QAAgB;MACtC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,eAAe,IAAI,CAACD,MAAM,EAAE;MACvD,MAAMO,IAAI,GAAG;QAAEH,KAAK;QAAEC,QAAQ;QAAEG,iBAAiB,EAAE;MAAI,CAAE;MAEzD,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAACH,GAAG,EAAEC,IAAI,CAAC,CAACG,IAAI,CACnCf,GAAG,CAAEgB,GAAQ,IAAKC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC,CAAC,EACpEjB,UAAU,CAACsB,GAAG,IAAIzB,UAAU,CAAC,MAAMyB,GAAG,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC,CAAC,CAC7D;IACH;IAEAY,eAAeA,CAACC,MAAc,EAAEC,IAAY,EAAEC,MAAc;MAC1D,MAAM3B,GAAG,GAAG,GAAG,IAAI,CAACJ,KAAK,IAAI6B,MAAM,OAAO;MAE1C,OAAO,IAAI,CAAChC,IAAI,CAACmC,GAAG,CAAC5B,GAAG,EAAE;QACxB6B,MAAM,EAAEH,IAAI;QACZC,MAAM,EAAEA,MAAM;QACdG,cAAc,EAAE;UACd,SAAS,EAAE;YACTC,OAAO,EAAE,yBAAyB;YAClCC,KAAK,EAAE,KAAK;YACZC,KAAK,EAAE,IAAIC,IAAI,EAAE,CAACC,cAAc;;;OAGrC,CAAC,CAAC/B,IAAI,CACLf,GAAG,CAAC,MAAK;QACP,MAAM+C,UAAU,GAAG5B,IAAI,CAACY,KAAK,CAACd,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;QACnEoB,UAAU,CAACV,IAAI,GAAGA,IAAI;QACtBpB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC2B,UAAU,CAAC,CAAC;MAC1D,CAAC,CAAC,EACFhD,UAAU,CAAC,MAAMH,UAAU,CAAC,MAAM,yBAAyB,CAAC,CAAC,CAC9D;IACH;IAEAoD,WAAWA,CAACC,GAAW;MACrB,MAAMtC,GAAG,GAAG,GAAG,IAAI,CAACJ,KAAK,IAAI0C,GAAG,OAAO;MACvC,OAAO,IAAI,CAAC7C,IAAI,CAAC8C,GAAG,CAAMvC,GAAG,CAAC;IAChC;IAEAwC,oBAAoBA,CAACF,GAAW;MAC9B,MAAMtC,GAAG,GAAG,GAAG,IAAI,CAACJ,KAAK,IAAI0C,GAAG,sBAAsB;MACtD,OAAO,IAAI,CAAC7C,IAAI,CAAC8C,GAAG,CAA+BvC,GAAG,CAAC;IACzD;IAEAyC,sBAAsBA,CAACH,GAAW,EAAEI,OAAe;MACjD,MAAM1C,GAAG,GAAG,GAAG,IAAI,CAACJ,KAAK,IAAI0C,GAAG,mBAAmBI,OAAO,aAAa;MACvE,OAAO,IAAI,CAACjD,IAAI,CAACmC,GAAG,CAAC5B,GAAG,EAAE,IAAI,CAAC;IACjC;IAEA2C,eAAeA,CAACL,GAAW,EAAEP,OAAe;MAC1C,MAAMa,iBAAiB,GAAG,GAAG,IAAI,CAAChD,KAAK,IAAI0C,GAAG,sBAAsB;MAEpE,OAAO,IAAI,CAACE,oBAAoB,CAACF,GAAG,CAAC,CAAClC,IAAI,CACxCd,SAAS,CAAE4B,IAAI,IAAI;QACjB,MAAM2B,SAAS,GAAG3B,IAAI,GAAG4B,MAAM,CAACC,OAAO,CAAC7B,IAAI,CAAC,GAAG,EAAE;QAClD,MAAM8B,KAAK,GAAGH,SAAS,CAACI,MAAM;QAE9B,IAAID,KAAK,IAAI,EAAE,EAAE;UACf,MAAME,MAAM,GAAGL,SAAS,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACjC,IAAInB,IAAI,CAACkB,CAAC,CAAC,CAAC,CAAC,CAACnB,KAAK,CAAC,CAACqB,OAAO,EAAE,GAAG,IAAIpB,IAAI,CAACmB,CAAC,CAAC,CAAC,CAAC,CAACpB,KAAK,CAAC,CAACqB,OAAO,EAAE,CAChE;UACD,MAAMC,SAAS,GAAGL,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAE9B,MAAMM,SAAS,GAAG,GAAG,IAAI,CAAC5D,KAAK,IAAI0C,GAAG,mBAAmBiB,SAAS,OAAO;UACzE,OAAO,IAAI,CAAC9D,IAAI,CAACgE,MAAM,CAACD,SAAS,CAAC,CAACpD,IAAI,CACrCd,SAAS,CAAC,MAAK;YACb,OAAO,IAAI,CAACG,IAAI,CAACU,IAAI,CAACyC,iBAAiB,EAAE;cACvCb,OAAO;cACPC,KAAK,EAAE,KAAK;cACZC,KAAK,EAAE,IAAIC,IAAI,EAAE,CAACC,cAAc;aACjC,CAAC;UACJ,CAAC,CAAC,CACH;QACH,CAAC,MAAM;UACL,OAAO,IAAI,CAAC1C,IAAI,CAACU,IAAI,CAACyC,iBAAiB,EAAE;YACvCb,OAAO;YACPC,KAAK,EAAE,KAAK;YACZC,KAAK,EAAE,IAAIC,IAAI,EAAE,CAACC,cAAc;WACjC,CAAC;QACJ;MACF,CAAC,CAAC,CACH;IACH;IAEAuB,qBAAqBA,CAACpB,GAAW;MAC/B,OAAO,IAAI,CAACE,oBAAoB,CAACF,GAAG,CAAC,CAAClC,IAAI,CACxCd,SAAS,CAAE4B,IAAI,IAAI;QACjB,IAAI,CAACA,IAAI,EAAE,OAAO/B,EAAE,CAAC,IAAI,CAAC;QAE1B,MAAMwE,GAAG,GAAG,IAAIzB,IAAI,EAAE;QACtB,MAAM0B,SAAS,GAAGd,MAAM,CAACC,OAAO,CAAC7B,IAAI,CAAC,CACnC2C,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,CAAC,KAAI;UACrB,MAAM9B,KAAK,GAAG,IAAIC,IAAI,CAAC6B,KAAK,CAAC9B,KAAK,CAAC;UACnC,MAAM+B,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACP,GAAG,CAACL,OAAO,EAAE,GAAGrB,KAAK,CAACqB,OAAO,EAAE,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;UACtF,OAAOU,QAAQ,IAAI,CAAC;QACtB,CAAC,CAAC,CACDG,GAAG,CAAC,CAAC,CAACC,GAAG,CAAC,KAAI;UACb,MAAMC,MAAM,GAAG,GAAG,IAAI,CAACzE,KAAK,IAAI0C,GAAG,mBAAmB8B,GAAG,OAAO;UAChE,OAAO,IAAI,CAAC3E,IAAI,CAACgE,MAAM,CAACY,MAAM,CAAC;QACjC,CAAC,CAAC;QAEJ,OAAOT,SAAS,CAACX,MAAM,GAAG,CAAC,GAAG/D,QAAQ,CAAC0E,SAAS,CAAC,GAAGzE,EAAE,CAAC,IAAI,CAAC;MAC9D,CAAC,CAAC,CACH;IACH;IAEA;IACFmF,aAAaA,CAAC7C,MAAc,EAAE3B,KAAa;MACzCQ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAC1CY,EAAE,EAAEI,MAAM;QACV3B;OACD,CAAC,CAAC;IACL;IAAC,QAAAgE,CAAA,G;uBAzJYvE,WAAW,EAAAgF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAXpF,WAAW;MAAAqF,OAAA,EAAXrF,WAAW,CAAAsF,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPvF,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}