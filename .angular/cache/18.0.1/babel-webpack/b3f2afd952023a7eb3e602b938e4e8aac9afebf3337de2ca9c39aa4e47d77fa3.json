{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet CategoryComponent = class CategoryComponent {\n  constructor(route, taskService) {\n    this.route = route;\n    this.taskService = taskService;\n    this.categoryName = '';\n    this.currentMonthName = ''; // Puedes definir esto dinámicamente si gustas\n    this.tareas = [];\n    // Estados para modales\n    this.isModalOpen = false;\n    this.isEditModalOpen = false;\n    // Nueva tarea\n    this.newTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'No Realizado'\n    };\n    // Edición\n    this.editedTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'No Realizado'\n    };\n    this.editedId = null;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.categoryName = params['name'];\n      this.loadTasks();\n    });\n  }\n  loadTasks() {\n    this.taskService.getTasks(this.categoryName).subscribe(data => {\n      this.tareas = data;\n    });\n  }\n  openModal() {\n    this.isModalOpen = true;\n    this.newTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'No Realizado'\n    };\n  }\n  closeModal() {\n    this.isModalOpen = false;\n  }\n  addTask() {\n    this.taskService.addTask(this.categoryName, this.newTask).subscribe(() => {\n      this.loadTasks();\n      this.closeModal();\n    });\n  }\n  openEditModal(id) {\n    const tarea = this.tareas.find(t => t.id === id);\n    if (!tarea) return;\n    this.editedTask = {\n      ...tarea\n    };\n    this.editedId = id;\n    this.isEditModalOpen = true;\n  }\n  closeEditModal() {\n    this.isEditModalOpen = false;\n    this.editedId = null;\n  }\n  saveEditedTask() {\n    if (!this.editedId) return;\n    this.taskService.updateTask(this.categoryName, this.editedId, this.editedTask).subscribe(() => {\n      this.loadTasks();\n      this.closeEditModal();\n    });\n  }\n  deleteTask(id) {\n    if (confirm('¿Estás seguro de eliminar esta tarea?')) {\n      this.taskService.deleteTask(this.categoryName, id).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n  }\n  isToday(fecha) {\n    if (!fecha || fecha === 'día') return false;\n    const today = new Date().toISOString().split('T')[0];\n    return fecha === today;\n  }\n};\nCategoryComponent = __decorate([Component({\n  selector: 'app-category',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.css']\n})], CategoryComponent);\nexport { CategoryComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","CategoryComponent","constructor","route","taskService","categoryName","currentMonthName","tareas","isModalOpen","isEditModalOpen","newTask","nombre","nota","fecha","estado","editedTask","editedId","ngOnInit","params","subscribe","loadTasks","getTasks","data","openModal","closeModal","addTask","openEditModal","id","tarea","find","t","closeEditModal","saveEditedTask","updateTask","deleteTask","confirm","isToday","today","Date","toISOString","split","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\pages\\category\\category.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { Task } from '../../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-category',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './category.component.html',\r\n  styleUrls: ['./category.component.css']\r\n})\r\nexport class CategoryComponent implements OnInit {\r\n  categoryName: string = '';\r\n  currentMonthName: string = ''; // Puedes definir esto dinámicamente si gustas\r\n  tareas: Task[] = [];\r\n\r\n  // Estados para modales\r\n  isModalOpen = false;\r\n  isEditModalOpen = false;\r\n\r\n  // Nueva tarea\r\n  newTask: Task = { nombre: '', nota: '', fecha: '', estado: 'No Realizado' };\r\n\r\n  // Edición\r\n  editedTask: Task = { nombre: '', nota: '', fecha: '', estado: 'No Realizado' };\r\n  editedId: string | null = null;\r\n\r\n  constructor(private route: ActivatedRoute, private taskService: TaskService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      this.categoryName = params['name'];\r\n      this.loadTasks();\r\n    });\r\n  }\r\n\r\n  loadTasks(): void {\r\n    this.taskService.getTasks(this.categoryName).subscribe((data: Task[]) => {\r\n      this.tareas = data;\r\n    });\r\n  }\r\n\r\n  openModal(): void {\r\n    this.isModalOpen = true;\r\n    this.newTask = { nombre: '', nota: '', fecha: '', estado: 'No Realizado' };\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.isModalOpen = false;\r\n  }\r\n\r\n  addTask(): void {\r\n    this.taskService.addTask(this.categoryName, this.newTask).subscribe(() => {\r\n      this.loadTasks();\r\n      this.closeModal();\r\n    });\r\n  }\r\n\r\n  openEditModal(id: string): void {\r\n    const tarea = this.tareas.find(t => t.id === id);\r\n    if (!tarea) return;\r\n\r\n    this.editedTask = { ...tarea };\r\n    this.editedId = id;\r\n    this.isEditModalOpen = true;\r\n  }\r\n\r\n  closeEditModal(): void {\r\n    this.isEditModalOpen = false;\r\n    this.editedId = null;\r\n  }\r\n\r\n  saveEditedTask(): void {\r\n    if (!this.editedId) return;\r\n\r\n    this.taskService.updateTask(this.categoryName, this.editedId, this.editedTask).subscribe(() => {\r\n      this.loadTasks();\r\n      this.closeEditModal();\r\n    });\r\n  }\r\n\r\n  deleteTask(id: string): void {\r\n    if (confirm('¿Estás seguro de eliminar esta tarea?')) {\r\n      this.taskService.deleteTask(this.categoryName, id).subscribe(() => {\r\n        this.loadTasks();\r\n      });\r\n    }\r\n  }\r\n\r\n  isToday(fecha: string): boolean {\r\n    if (!fecha || fecha === 'día') return false;\r\n    const today = new Date().toISOString().split('T')[0];\r\n    return fecha === today;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}