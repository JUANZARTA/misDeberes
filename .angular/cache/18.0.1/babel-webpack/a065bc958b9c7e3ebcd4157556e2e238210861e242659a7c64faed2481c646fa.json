{"ast":null,"code":"import { map, switchMap, catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./date.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let TaskTypeService = /*#__PURE__*/(() => {\n  class TaskTypeService {\n    constructor(authService, dateService, http) {\n      this.authService = authService;\n      this.dateService = dateService;\n      this.http = http;\n      // URL base de Firebase\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\n    }\n    // Genera la ruta del usuario actual con año y mes\n    getPath() {\n      const user = this.authService.getUser();\n      const year = this.dateService.getSelectedYear();\n      const month = this.dateService.getSelectedMonth();\n      if (!user?.id || !year || !month) return null;\n      return `${this.dbUrl}/${user.id}/${year}/${month}/categorias`;\n    }\n    // Limpia texto para usarlo como key\n    sanitizeKey(key) {\n      return key.trim().toLowerCase().replace(/\\s+/g, '_');\n    }\n    // Obtiene todos los nombres de tipos de tarea como objetos\n    getAllTaskTypes() {\n      const path = this.getPath();\n      if (!path) return of([]);\n      const url = `${path}.json`;\n      return this.http.get(url).pipe(map(response => {\n        return response ? Object.keys(response).map(key => ({\n          key,\n          nombre: response[key]?.nombre || key\n        })) : [];\n      }), catchError(err => {\n        console.error('[ERROR][GET TYPES]', err);\n        return of([]);\n      }));\n    }\n    // Agrega un nuevo tipo de tarea\n    addTaskType(nombre) {\n      const path = this.getPath();\n      if (!path) return throwError(() => new Error('Ruta no válida'));\n      const key = this.sanitizeKey(nombre);\n      const url = `${path}/${key}.json`;\n      return this.http.put(url, {\n        tareas: {},\n        nombre\n      });\n    }\n    // Elimina tipo de tarea por key\n    deleteTaskType(key) {\n      const path = this.getPath();\n      if (!path) return throwError(() => new Error('Ruta no válida'));\n      const url = `${path}/${key}.json`;\n      return this.http.delete(url);\n    }\n    // Edita tipo de tarea (renombra)\n    editTaskType(oldKey, newNombre) {\n      const path = this.getPath();\n      if (!path) return throwError(() => new Error('Ruta no válida'));\n      const newKey = this.sanitizeKey(newNombre);\n      const oldUrl = `${path}/${oldKey}.json`;\n      const newUrl = `${path}/${newKey}.json`;\n      return this.http.get(oldUrl).pipe(switchMap(data => {\n        const contenido = {\n          ...data,\n          nombre: newNombre\n        };\n        return this.http.put(newUrl, contenido);\n      }), switchMap(() => this.http.delete(oldUrl)), catchError(err => {\n        console.error('[ERROR][EDIT TYPE]', err);\n        return throwError(() => err);\n      }));\n    }\n    static #_ = this.ɵfac = function TaskTypeService_Factory(t) {\n      return new (t || TaskTypeService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.DateService), i0.ɵɵinject(i3.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskTypeService,\n      factory: TaskTypeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskTypeService;\n})();","map":{"version":3,"names":["map","switchMap","catchError","of","throwError","TaskTypeService","constructor","authService","dateService","http","dbUrl","getPath","user","getUser","year","getSelectedYear","month","getSelectedMonth","id","sanitizeKey","key","trim","toLowerCase","replace","getAllTaskTypes","path","url","get","pipe","response","Object","keys","nombre","err","console","error","addTaskType","Error","put","tareas","deleteTaskType","delete","editTaskType","oldKey","newNombre","newKey","oldUrl","newUrl","data","contenido","_","i0","ɵɵinject","i1","AuthService","i2","DateService","i3","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// Servicio para gestionar tipos de tareas desde Firebase sin initializeApp\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { DateService } from './date.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTypeService {\r\n  // URL base de Firebase\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private dateService: DateService,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  // Genera la ruta del usuario actual con año y mes\r\n  private getPath(): string | null {\r\n    const user = this.authService.getUser();\r\n    const year = this.dateService.getSelectedYear();\r\n    const month = this.dateService.getSelectedMonth();\r\n    if (!user?.id || !year || !month) return null;\r\n    return `${this.dbUrl}/${user.id}/${year}/${month}/categorias`;\r\n  }\r\n\r\n  // Limpia texto para usarlo como key\r\n  private sanitizeKey(key: string): string {\r\n    return key.trim().toLowerCase().replace(/\\s+/g, '_');\r\n  }\r\n\r\n  // Obtiene todos los nombres de tipos de tarea como objetos\r\n  getAllTaskTypes(): Observable<{ key: string; nombre: string }[]> {\r\n    const path = this.getPath();\r\n    if (!path) return of([]);\r\n\r\n    const url = `${path}.json`;\r\n    return this.http.get<{ [key: string]: any }>(url).pipe(\r\n      map((response) => {\r\n        return response\r\n          ? Object.keys(response).map((key) => ({\r\n              key,\r\n              nombre: response[key]?.nombre || key,\r\n            }))\r\n          : [];\r\n      }),\r\n      catchError((err) => {\r\n        console.error('[ERROR][GET TYPES]', err);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Agrega un nuevo tipo de tarea\r\n  addTaskType(nombre: string): Observable<any> {\r\n    const path = this.getPath();\r\n    if (!path) return throwError(() => new Error('Ruta no válida'));\r\n    const key = this.sanitizeKey(nombre);\r\n    const url = `${path}/${key}.json`;\r\n    return this.http.put(url, { tareas: {}, nombre });\r\n  }\r\n\r\n  // Elimina tipo de tarea por key\r\n  deleteTaskType(key: string): Observable<any> {\r\n    const path = this.getPath();\r\n    if (!path) return throwError(() => new Error('Ruta no válida'));\r\n    const url = `${path}/${key}.json`;\r\n    return this.http.delete(url);\r\n  }\r\n\r\n  // Edita tipo de tarea (renombra)\r\n  editTaskType(oldKey: string, newNombre: string): Observable<any> {\r\n    const path = this.getPath();\r\n    if (!path) return throwError(() => new Error('Ruta no válida'));\r\n    const newKey = this.sanitizeKey(newNombre);\r\n\r\n    const oldUrl = `${path}/${oldKey}.json`;\r\n    const newUrl = `${path}/${newKey}.json`;\r\n\r\n    return this.http.get(oldUrl).pipe(\r\n      switchMap((data: any) => {\r\n        const contenido = { ...data, nombre: newNombre };\r\n        return this.http.put(newUrl, contenido);\r\n      }),\r\n      switchMap(() => this.http.delete(oldUrl)),\r\n      catchError((err) => {\r\n        console.error('[ERROR][EDIT TYPE]', err);\r\n        return throwError(() => err);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}