{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./date.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(authService, dateService, http) {\n      this.authService = authService;\n      this.dateService = dateService;\n      this.http = http;\n      // URL base de Firebase\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\n    }\n    // Retorna el path absoluto del tipo de tarea actual\n    getPath(taskType) {\n      const user = this.authService.getUser();\n      const year = this.dateService.getSelectedYear();\n      const month = this.dateService.getSelectedMonth();\n      if (!user?.id || !year || !month) return null;\n      return `${this.dbUrl}/${user.id}/${year}/${month}/categorias/${taskType}/tareas`;\n    }\n    // Consulta todas las tareas de un tipo de tarea\n    getTasks(taskType) {\n      const path = this.getPath(taskType);\n      if (!path) return of([]);\n      return this.http.get(`${path}.json`).pipe(map(res => {\n        return res ? Object.keys(res).map(key => ({\n          ...res[key],\n          nombre: key\n        })) : [];\n      }), catchError(err => {\n        console.error('[ERROR][GET TASKS]', err);\n        return of([]);\n      }));\n    }\n    // Agrega una nueva tarea a la base de datos\n    addTask(taskType, tarea) {\n      const path = this.getPath(taskType);\n      if (!path || !tarea?.nombre) return throwError(() => new Error('Datos inválidos'));\n      const nombreKey = tarea.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\n      const url = `${path}.json`;\n      return this.http.patch(url, {\n        [nombreKey]: tarea\n      });\n    }\n    static #_ = this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.DateService), i0.ɵɵinject(i3.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskService;\n})();","map":{"version":3,"names":["map","catchError","of","throwError","TaskService","constructor","authService","dateService","http","dbUrl","getPath","taskType","user","getUser","year","getSelectedYear","month","getSelectedMonth","id","getTasks","path","get","pipe","res","Object","keys","key","nombre","err","console","error","addTask","tarea","Error","nombreKey","trim","toLowerCase","replace","url","patch","_","i0","ɵɵinject","i1","AuthService","i2","DateService","i3","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\services\\task.service.ts"],"sourcesContent":["// Servicio para obtener, agregar, editar y eliminar tareas\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { DateService } from './date.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  // URL base de Firebase\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private dateService: DateService,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  // Retorna el path absoluto del tipo de tarea actual\r\n  private getPath(taskType: string): string | null {\r\n    const user = this.authService.getUser();\r\n    const year = this.dateService.getSelectedYear();\r\n    const month = this.dateService.getSelectedMonth();\r\n    if (!user?.id || !year || !month) return null;\r\n    return `${this.dbUrl}/${user.id}/${year}/${month}/categorias/${taskType}/tareas`;\r\n  }\r\n\r\n  // Consulta todas las tareas de un tipo de tarea\r\n  getTasks(taskType: string): Observable<any[]> {\r\n    const path = this.getPath(taskType);\r\n    if (!path) return of([]);\r\n\r\n    return this.http.get<{ [key: string]: any }>(`${path}.json`).pipe(\r\n      map(res => {\r\n        return res\r\n          ? Object.keys(res).map(key => ({\r\n              ...res[key],\r\n              nombre: key\r\n            }))\r\n          : [];\r\n      }),\r\n      catchError(err => {\r\n        console.error('[ERROR][GET TASKS]', err);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Agrega una nueva tarea a la base de datos\r\n  addTask(taskType: string, tarea: any): Observable<any> {\r\n    const path = this.getPath(taskType);\r\n    if (!path || !tarea?.nombre) return throwError(() => new Error('Datos inválidos'));\r\n\r\n    const nombreKey = tarea.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\r\n    const url = `${path}.json`;\r\n\r\n    return this.http.patch(url, {\r\n      [nombreKey]: tarea\r\n  });\r\n  }\r\n}\r\n"],"mappings":"AAKA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAChD,SAAqBC,EAAE,EAAEC,UAAU,QAAQ,MAAM;;;;;AAKjD,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAKtBC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,IAAgB;MAFhB,KAAAF,WAAW,GAAXA,WAAW;MACX,KAAAC,WAAW,GAAXA,WAAW;MACX,KAAAC,IAAI,GAAJA,IAAI;MANd;MACQ,KAAAC,KAAK,GAAG,sDAAsD;IAMnE;IAEH;IACQC,OAAOA,CAACC,QAAgB;MAC9B,MAAMC,IAAI,GAAG,IAAI,CAACN,WAAW,CAACO,OAAO,EAAE;MACvC,MAAMC,IAAI,GAAG,IAAI,CAACP,WAAW,CAACQ,eAAe,EAAE;MAC/C,MAAMC,KAAK,GAAG,IAAI,CAACT,WAAW,CAACU,gBAAgB,EAAE;MACjD,IAAI,CAACL,IAAI,EAAEM,EAAE,IAAI,CAACJ,IAAI,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;MAC7C,OAAO,GAAG,IAAI,CAACP,KAAK,IAAIG,IAAI,CAACM,EAAE,IAAIJ,IAAI,IAAIE,KAAK,eAAeL,QAAQ,SAAS;IAClF;IAEA;IACAQ,QAAQA,CAACR,QAAgB;MACvB,MAAMS,IAAI,GAAG,IAAI,CAACV,OAAO,CAACC,QAAQ,CAAC;MACnC,IAAI,CAACS,IAAI,EAAE,OAAOlB,EAAE,CAAC,EAAE,CAAC;MAExB,OAAO,IAAI,CAACM,IAAI,CAACa,GAAG,CAAyB,GAAGD,IAAI,OAAO,CAAC,CAACE,IAAI,CAC/DtB,GAAG,CAACuB,GAAG,IAAG;QACR,OAAOA,GAAG,GACNC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACvB,GAAG,CAAC0B,GAAG,KAAK;UAC3B,GAAGH,GAAG,CAACG,GAAG,CAAC;UACXC,MAAM,EAAED;SACT,CAAC,CAAC,GACH,EAAE;MACR,CAAC,CAAC,EACFzB,UAAU,CAAC2B,GAAG,IAAG;QACfC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,GAAG,CAAC;QACxC,OAAO1B,EAAE,CAAC,EAAE,CAAC;MACf,CAAC,CAAC,CACH;IACH;IAEA;IACA6B,OAAOA,CAACpB,QAAgB,EAAEqB,KAAU;MAClC,MAAMZ,IAAI,GAAG,IAAI,CAACV,OAAO,CAACC,QAAQ,CAAC;MACnC,IAAI,CAACS,IAAI,IAAI,CAACY,KAAK,EAAEL,MAAM,EAAE,OAAOxB,UAAU,CAAC,MAAM,IAAI8B,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAElF,MAAMC,SAAS,GAAGF,KAAK,CAACL,MAAM,CAACQ,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;MACxE,MAAMC,GAAG,GAAG,GAAGlB,IAAI,OAAO;MAE1B,OAAO,IAAI,CAACZ,IAAI,CAAC+B,KAAK,CAACD,GAAG,EAAE;QAC1B,CAACJ,SAAS,GAAGF;OAChB,CAAC;IACF;IAAC,QAAAQ,CAAA,G;uBApDUpC,WAAW,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAX7C,WAAW;MAAA8C,OAAA,EAAX9C,WAAW,CAAA+C,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPhD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}