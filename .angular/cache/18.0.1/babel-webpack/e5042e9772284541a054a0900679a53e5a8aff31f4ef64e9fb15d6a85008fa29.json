{"ast":null,"code":"import { __decorate } from \"tslib\";\n// taskType.service.ts\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nlet TaskTypeService = class TaskTypeService {\n  constructor(db, authService) {\n    this.db = db;\n    this.authService = authService;\n  }\n  // Método para obtener todos los tipos de tarea\n  getTaskTypes() {\n    const path = this.getTaskTypePath();\n    return this.db.list(path).snapshotChanges().pipe(map(changes => changes.map(c => c.key)));\n  }\n  // Método para agregar nuevo tipo de tarea\n  addTaskType(nombre) {\n    const path = this.getTaskTypePath() + '/' + nombre;\n    return this.db.object(path).set({\n      tareas: {}\n    });\n  }\n  // Método para editar nombre de tipo de tarea\n  editTaskType(oldName, newName) {\n    const basePath = this.getTaskTypePath();\n    const oldPath = `${basePath}/${oldName}`;\n    const newPath = `${basePath}/${newName}`;\n    return this.db.object(oldPath).valueChanges().pipe(map(data => data)).toPromise().then(data => {\n      return this.db.object(newPath).set(data).then(() => {\n        return this.db.object(oldPath).remove();\n      });\n    });\n  }\n  // Método para eliminar tipo de tarea\n  deleteTaskType(nombre) {\n    const path = this.getTaskTypePath() + '/' + nombre;\n    return this.db.object(path).remove();\n  }\n  // Construye el path Firebase para el usuario actual y fecha actual\n  getTaskTypePath() {\n    const userId = this.authService.getUserId(); // Asume que retorna el id del usuario actual\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    return `/${userId}/${year}/${month}/categorias`;\n  }\n};\nTaskTypeService = __decorate([Injectable({\n  providedIn: 'root'\n})], TaskTypeService);\nexport { TaskTypeService };","map":{"version":3,"names":["Injectable","map","TaskTypeService","constructor","db","authService","getTaskTypes","path","getTaskTypePath","list","snapshotChanges","pipe","changes","c","key","addTaskType","nombre","object","set","tareas","editTaskType","oldName","newName","basePath","oldPath","newPath","valueChanges","data","toPromise","then","remove","deleteTaskType","userId","getUserId","now","Date","year","getFullYear","month","String","getMonth","padStart","__decorate","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\taskType.service.ts"],"sourcesContent":["// taskType.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { AngularFireDatabase } from '@angular/fire/compat/database';\r\nimport { AuthService } from './auth.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { getCurrentDatePath } from '../utils/datePath'; // Asegúrate de tener esto si usas fecha actual\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskTypeService {\r\n  constructor(private db: AngularFireDatabase, private authService: AuthService) {}\r\n\r\n  // Método para obtener todos los tipos de tarea\r\n  getTaskTypes() {\r\n    const path = this.getTaskTypePath();\r\n    return this.db.list(path).snapshotChanges().pipe(\r\n      map(changes =>\r\n        changes.map(c => c.key!)\r\n      )\r\n    );\r\n  }\r\n\r\n  // Método para agregar nuevo tipo de tarea\r\n  addTaskType(nombre: string): Promise<void> {\r\n    const path = this.getTaskTypePath() + '/' + nombre;\r\n    return this.db.object(path).set({ tareas: {} });\r\n  }\r\n\r\n  // Método para editar nombre de tipo de tarea\r\n  editTaskType(oldName: string, newName: string): Promise<void> {\r\n    const basePath = this.getTaskTypePath();\r\n    const oldPath = `${basePath}/${oldName}`;\r\n    const newPath = `${basePath}/${newName}`;\r\n\r\n    return this.db.object(oldPath).valueChanges().pipe(\r\n      map(data => data as any)\r\n    ).toPromise().then(data => {\r\n      return this.db.object(newPath).set(data).then(() => {\r\n        return this.db.object(oldPath).remove();\r\n      });\r\n    });\r\n  }\r\n\r\n  // Método para eliminar tipo de tarea\r\n  deleteTaskType(nombre: string): Promise<void> {\r\n    const path = this.getTaskTypePath() + '/' + nombre;\r\n    return this.db.object(path).remove();\r\n  }\r\n\r\n  // Construye el path Firebase para el usuario actual y fecha actual\r\n  private getTaskTypePath(): string {\r\n    const userId = this.authService.getUserId(); // Asume que retorna el id del usuario actual\r\n    const now = new Date();\r\n    const year = now.getFullYear();\r\n    const month = String(now.getMonth() + 1).padStart(2, '0');\r\n    return `/${userId}/${year}/${month}/categorias`;\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAG1C,SAASC,GAAG,QAAQ,gBAAgB;AAM7B,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,EAAuB,EAAUC,WAAwB;IAAzD,KAAAD,EAAE,GAAFA,EAAE;IAA+B,KAAAC,WAAW,GAAXA,WAAW;EAAgB;EAEhF;EACAC,YAAYA,CAAA;IACV,MAAMC,IAAI,GAAG,IAAI,CAACC,eAAe,EAAE;IACnC,OAAO,IAAI,CAACJ,EAAE,CAACK,IAAI,CAACF,IAAI,CAAC,CAACG,eAAe,EAAE,CAACC,IAAI,CAC9CV,GAAG,CAACW,OAAO,IACTA,OAAO,CAACX,GAAG,CAACY,CAAC,IAAIA,CAAC,CAACC,GAAI,CAAC,CACzB,CACF;EACH;EAEA;EACAC,WAAWA,CAACC,MAAc;IACxB,MAAMT,IAAI,GAAG,IAAI,CAACC,eAAe,EAAE,GAAG,GAAG,GAAGQ,MAAM;IAClD,OAAO,IAAI,CAACZ,EAAE,CAACa,MAAM,CAACV,IAAI,CAAC,CAACW,GAAG,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAE,CAAC;EACjD;EAEA;EACAC,YAAYA,CAACC,OAAe,EAAEC,OAAe;IAC3C,MAAMC,QAAQ,GAAG,IAAI,CAACf,eAAe,EAAE;IACvC,MAAMgB,OAAO,GAAG,GAAGD,QAAQ,IAAIF,OAAO,EAAE;IACxC,MAAMI,OAAO,GAAG,GAAGF,QAAQ,IAAID,OAAO,EAAE;IAExC,OAAO,IAAI,CAAClB,EAAE,CAACa,MAAM,CAACO,OAAO,CAAC,CAACE,YAAY,EAAE,CAACf,IAAI,CAChDV,GAAG,CAAC0B,IAAI,IAAIA,IAAW,CAAC,CACzB,CAACC,SAAS,EAAE,CAACC,IAAI,CAACF,IAAI,IAAG;MACxB,OAAO,IAAI,CAACvB,EAAE,CAACa,MAAM,CAACQ,OAAO,CAAC,CAACP,GAAG,CAACS,IAAI,CAAC,CAACE,IAAI,CAAC,MAAK;QACjD,OAAO,IAAI,CAACzB,EAAE,CAACa,MAAM,CAACO,OAAO,CAAC,CAACM,MAAM,EAAE;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACAC,cAAcA,CAACf,MAAc;IAC3B,MAAMT,IAAI,GAAG,IAAI,CAACC,eAAe,EAAE,GAAG,GAAG,GAAGQ,MAAM;IAClD,OAAO,IAAI,CAACZ,EAAE,CAACa,MAAM,CAACV,IAAI,CAAC,CAACuB,MAAM,EAAE;EACtC;EAEA;EACQtB,eAAeA,CAAA;IACrB,MAAMwB,MAAM,GAAG,IAAI,CAAC3B,WAAW,CAAC4B,SAAS,EAAE,CAAC,CAAC;IAC7C,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,MAAMC,IAAI,GAAGF,GAAG,CAACG,WAAW,EAAE;IAC9B,MAAMC,KAAK,GAAGC,MAAM,CAACL,GAAG,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACzD,OAAO,IAAIT,MAAM,IAAII,IAAI,IAAIE,KAAK,aAAa;EACjD;CACD;AAhDYpC,eAAe,GAAAwC,UAAA,EAH3B1C,UAAU,CAAC;EACV2C,UAAU,EAAE;CACb,CAAC,C,EACWzC,eAAe,CAgD3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}