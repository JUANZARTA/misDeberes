{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'https://tu-proyecto.firebaseio.com'; // üîÅ cambia esto por tu URL de Firebase\n    }\n    getUserId() {\n      return JSON.parse(localStorage.getItem('user') || '{}')?.localId || '';\n    }\n    getCurrentDate() {\n      const now = new Date();\n      const year = String(now.getFullYear());\n      const month = String(now.getMonth() + 1).padStart(2, '0');\n      return {\n        year,\n        month\n      };\n    }\n    getCategories() {\n      const userId = this.getUserId();\n      const {\n        year,\n        month\n      } = this.getCurrentDate();\n      return this.http.get(`${this.baseUrl}/${userId}/${year}/${month}/categorias.json`).pipe(map(data => data ? Object.keys(data) : []));\n    }\n    addCategory(nombre) {\n      const userId = this.getUserId();\n      const {\n        year,\n        month\n      } = this.getCurrentDate();\n      // Firebase requiere que crees una entrada para que el nodo exista\n      return this.http.put(`${this.baseUrl}/${userId}/${year}/${month}/categorias/${nombre}.json`, {\n        creado: true\n      } // Placeholder\n      );\n    }\n    static #_ = this.…µfac = function CategoryService_Factory(t) {\n      return new (t || CategoryService)(i0.…µ…µinject(i1.HttpClient));\n    };\n    static #_2 = this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: CategoryService,\n      factory: CategoryService.…µfac,\n      providedIn: 'root'\n    });\n  }\n  return CategoryService;\n})();","map":{"version":3,"names":["map","CategoryService","constructor","http","baseUrl","getUserId","JSON","parse","localStorage","getItem","localId","getCurrentDate","now","Date","year","String","getFullYear","month","getMonth","padStart","getCategories","userId","get","pipe","data","Object","keys","addCategory","nombre","put","creado","_","i0","…µ…µinject","i1","HttpClient","_2","factory","…µfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CategoryService {\r\n  private baseUrl = 'https://tu-proyecto.firebaseio.com'; // üîÅ cambia esto por tu URL de Firebase\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private getUserId(): string {\r\n    return JSON.parse(localStorage.getItem('user') || '{}')?.localId || '';\r\n  }\r\n\r\n  private getCurrentDate(): { year: string; month: string } {\r\n    const now = new Date();\r\n    const year = String(now.getFullYear());\r\n    const month = String(now.getMonth() + 1).padStart(2, '0');\r\n    return { year, month };\r\n  }\r\n\r\n  getCategories(): Observable<string[]> {\r\n    const userId = this.getUserId();\r\n    const { year, month } = this.getCurrentDate();\r\n\r\n    return this.http\r\n      .get<string[]>(`${this.baseUrl}/${userId}/${year}/${month}/categorias.json`)\r\n      .pipe(\r\n        map(data => data ? Object.keys(data) : [])\r\n      );\r\n  }\r\n\r\n  addCategory(nombre: string): Observable<any> {\r\n    const userId = this.getUserId();\r\n    const { year, month } = this.getCurrentDate();\r\n\r\n    // Firebase requiere que crees una entrada para que el nodo exista\r\n    return this.http.put(\r\n      `${this.baseUrl}/${userId}/${year}/${month}/categorias/${nombre}.json`,\r\n      { creado: true } // Placeholder\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAGtC,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAG1BC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFhB,KAAAC,OAAO,GAAG,oCAAoC,CAAC,CAAC;IAEjB;IAE/BC,SAASA,CAAA;MACf,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,EAAEC,OAAO,IAAI,EAAE;IACxE;IAEQC,cAAcA,CAAA;MACpB,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;MACtB,MAAMC,IAAI,GAAGC,MAAM,CAACH,GAAG,CAACI,WAAW,EAAE,CAAC;MACtC,MAAMC,KAAK,GAAGF,MAAM,CAACH,GAAG,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACzD,OAAO;QAAEL,IAAI;QAAEG;MAAK,CAAE;IACxB;IAEAG,aAAaA,CAAA;MACX,MAAMC,MAAM,GAAG,IAAI,CAAChB,SAAS,EAAE;MAC/B,MAAM;QAAES,IAAI;QAAEG;MAAK,CAAE,GAAG,IAAI,CAACN,cAAc,EAAE;MAE7C,OAAO,IAAI,CAACR,IAAI,CACbmB,GAAG,CAAW,GAAG,IAAI,CAAClB,OAAO,IAAIiB,MAAM,IAAIP,IAAI,IAAIG,KAAK,kBAAkB,CAAC,CAC3EM,IAAI,CACHvB,GAAG,CAACwB,IAAI,IAAIA,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,GAAG,EAAE,CAAC,CAC3C;IACL;IAEAG,WAAWA,CAACC,MAAc;MACxB,MAAMP,MAAM,GAAG,IAAI,CAAChB,SAAS,EAAE;MAC/B,MAAM;QAAES,IAAI;QAAEG;MAAK,CAAE,GAAG,IAAI,CAACN,cAAc,EAAE;MAE7C;MACA,OAAO,IAAI,CAACR,IAAI,CAAC0B,GAAG,CAClB,GAAG,IAAI,CAACzB,OAAO,IAAIiB,MAAM,IAAIP,IAAI,IAAIG,KAAK,eAAeW,MAAM,OAAO,EACtE;QAAEE,MAAM,EAAE;MAAI,CAAE,CAAC;OAClB;IACH;IAAC,QAAAC,CAAA,G;uBApCU9B,eAAe,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAfnC,eAAe;MAAAoC,OAAA,EAAfpC,eAAe,CAAAqC,IAAA;MAAAC,UAAA,EADF;IAAM;;SACnBtC,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}