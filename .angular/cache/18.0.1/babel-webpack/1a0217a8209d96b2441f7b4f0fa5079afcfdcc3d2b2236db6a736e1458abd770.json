{"ast":null,"code":"import { __decorate } from \"tslib\";\n// Home para visualizar, crear, editar y eliminar tipos de tarea\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet HomeComponent = class HomeComponent {\n  constructor(taskTypeService, router) {\n    this.taskTypeService = taskTypeService;\n    this.router = router;\n    this.taskTypes = [];\n    this.isModalOpen = false;\n    this.newTaskType = '';\n  }\n  ngOnInit() {\n    console.log('[INIT] Home cargado');\n    this.loadTaskTypes();\n  }\n  loadTaskTypes() {\n    this.taskTypeService.getAllTaskTypes().subscribe({\n      next: types => {\n        console.log('[GET] Tipos cargados:', types);\n        this.taskTypes = types;\n      },\n      error: err => {\n        console.error('[ERROR] Al obtener tipos de tarea:', err);\n      }\n    });\n  }\n  openModal() {\n    this.isModalOpen = true;\n  }\n  closeModal() {\n    this.isModalOpen = false;\n    this.newTaskType = '';\n  }\n  addTaskType() {\n    if (this.newTaskType.trim()) {\n      console.log('[CREATE] Nuevo tipo:', this.newTaskType);\n      this.taskTypeService.addTaskType(this.newTaskType).subscribe({\n        next: () => {\n          this.loadTaskTypes();\n          this.closeModal();\n        },\n        error: err => {\n          console.error('[ERROR] Al agregar tipo:', err);\n        }\n      });\n    }\n  }\n  enterTaskType(type) {\n    this.router.navigate(['/app/category', type]);\n  }\n  editTaskType(type) {\n    const newName = prompt('Editar nombre del tipo de tarea:', type);\n    if (newName && newName.trim()) {\n      this.taskTypeService.editTaskType(type, newName);\n      setTimeout(() => this.loadTaskTypes(), 300);\n    }\n  }\n  deleteTaskType(type) {\n    if (confirm(`¿Deseas eliminar el tipo de tarea \"${type}\"?`)) {\n      this.taskTypeService.deleteTaskType(type).subscribe({\n        next: () => this.loadTaskTypes(),\n        error: err => console.error('[ERROR] Al eliminar tipo:', err)\n      });\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  standalone: true,\n  templateUrl: './home.component.html',\n  styleUrls: [],\n  imports: [CommonModule, FormsModule]\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","HomeComponent","constructor","taskTypeService","router","taskTypes","isModalOpen","newTaskType","ngOnInit","console","log","loadTaskTypes","getAllTaskTypes","subscribe","next","types","error","err","openModal","closeModal","addTaskType","trim","enterTaskType","type","navigate","editTaskType","newName","prompt","setTimeout","deleteTaskType","confirm","__decorate","selector","standalone","templateUrl","styleUrls","imports"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\pages\\home\\home.component.ts"],"sourcesContent":["// Home para visualizar, crear, editar y eliminar tipos de tarea\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TaskTypeService } from '../../services/taskType.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  templateUrl: './home.component.html',\r\n  styleUrls: [],\r\n  imports: [CommonModule, FormsModule]\r\n})\r\nexport class HomeComponent {\r\n  taskTypes: string[] = [];\r\n  isModalOpen = false;\r\n  newTaskType = '';\r\n\r\n  constructor(\r\n    private taskTypeService: TaskTypeService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    console.log('[INIT] Home cargado');\r\n    this.loadTaskTypes();\r\n  }\r\n\r\n  loadTaskTypes(): void {\r\n    this.taskTypeService.getAllTaskTypes().subscribe({\r\n      next: (types: string[]) => {\r\n        console.log('[GET] Tipos cargados:', types);\r\n        this.taskTypes = types;\r\n      },\r\n      error: (err) => {\r\n        console.error('[ERROR] Al obtener tipos de tarea:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  openModal(): void {\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.isModalOpen = false;\r\n    this.newTaskType = '';\r\n  }\r\n\r\n  addTaskType(): void {\r\n    if (this.newTaskType.trim()) {\r\n      console.log('[CREATE] Nuevo tipo:', this.newTaskType);\r\n      this.taskTypeService.addTaskType(this.newTaskType).subscribe({\r\n        next: () => {\r\n          this.loadTaskTypes();\r\n          this.closeModal();\r\n        },\r\n        error: (err) => {\r\n          console.error('[ERROR] Al agregar tipo:', err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  enterTaskType(type: string): void {\r\n    this.router.navigate(['/app/category', type]);\r\n  }\r\n\r\n  editTaskType(type: string): void {\r\n    const newName = prompt('Editar nombre del tipo de tarea:', type);\r\n    if (newName && newName.trim()) {\r\n      this.taskTypeService.editTaskType(type, newName);\r\n      setTimeout(() => this.loadTaskTypes(), 300);\r\n    }\r\n  }\r\n\r\n  deleteTaskType(type: string): void {\r\n    if (confirm(`¿Deseas eliminar el tipo de tarea \"${type}\"?`)) {\r\n      this.taskTypeService.deleteTaskType(type).subscribe({\r\n        next: () => this.loadTaskTypes(),\r\n        error: (err) => console.error('[ERROR] Al eliminar tipo:', err)\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}