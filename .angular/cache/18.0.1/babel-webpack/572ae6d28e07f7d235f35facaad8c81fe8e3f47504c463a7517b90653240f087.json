{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiKey = 'AIzaSyCXaTov5g6_qWHoxHdI39tLzEH7VQx5ttw';\n      this.baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';\n      this.dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\n    }\n    login(email, password) {\n      const url = `${this.baseUrl}:signInWithPassword?key=${this.apiKey}`;\n      return this.http.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n    }\n    register(nombre, email, password) {\n      const url = `${this.baseUrl}:signUp?key=${this.apiKey}`;\n      return this.http.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n    }\n    guardarUsuarioEnDB(userId, email, nombre) {\n      const url = `${this.dbUrl}/${userId}.json`;\n      return this.http.put(url, {\n        email,\n        nombre,\n        contrase√±a: '123456'\n      });\n    }\n    guardarSesion(userId, email) {\n      localStorage.setItem('user', JSON.stringify({\n        id: userId,\n        // üîπ aseguramos que est√© como id\n        email\n      }));\n    }\n    getUser() {\n      const data = localStorage.getItem('user');\n      return data ? JSON.parse(data) : null;\n    }\n    logout() {\n      localStorage.removeItem('user');\n      this.router.navigate(['/login']);\n    }\n    isLoggedIn() {\n      return !!localStorage.getItem('user');\n    }\n    static #_ = this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n    };\n    static #_2 = this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["AuthService","constructor","http","router","apiKey","baseUrl","dbUrl","login","email","password","url","post","returnSecureToken","register","nombre","guardarUsuarioEnDB","userId","put","contrase√±a","guardarSesion","localStorage","setItem","JSON","stringify","id","getUser","data","getItem","parse","logout","removeItem","navigate","isLoggedIn","_","i0","…µ…µinject","i1","HttpClient","i2","Router","_2","factory","…µfac","providedIn"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\misDeberes\\src\\app\\services\\auth.service.ts"],"sourcesContent":["// Servicio para autenticaci√≥n y control de sesi√≥n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiKey = 'AIzaSyCXaTov5g6_qWHoxHdI39tLzEH7VQx5ttw';\r\n  private baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';\r\n  private dbUrl = 'https://misdeberes-fac01-default-rtdb.firebaseio.com';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  login(email: string, password: string) {\r\n    const url = `${this.baseUrl}:signInWithPassword?key=${this.apiKey}`;\r\n    return this.http.post(url, {\r\n      email,\r\n      password,\r\n      returnSecureToken: true\r\n    });\r\n  }\r\n\r\n  register(nombre: string, email: string, password: string) {\r\n    const url = `${this.baseUrl}:signUp?key=${this.apiKey}`;\r\n    return this.http.post(url, {\r\n      email,\r\n      password,\r\n      returnSecureToken: true\r\n    });\r\n  }\r\n\r\n  guardarUsuarioEnDB(userId: string, email: string, nombre: string) {\r\n    const url = `${this.dbUrl}/${userId}.json`;\r\n    return this.http.put(url, {\r\n      email,\r\n      nombre,\r\n      contrase√±a: '123456'\r\n    });\r\n  }\r\n\r\n  guardarSesion(userId: string, email: string) {\r\n    localStorage.setItem('user', JSON.stringify({\r\n      id: userId, // üîπ aseguramos que est√© como id\r\n      email\r\n    }));\r\n  }\r\n\r\n  getUser() {\r\n    const data = localStorage.getItem('user');\r\n    return data ? JSON.parse(data) : null;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('user');\r\n  }\r\n}\r\n"],"mappings":";;;AAQA,WAAaA,WAAW;EAAlB,MAAOA,WAAW;IAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;MAAxC,KAAAD,IAAI,GAAJA,IAAI;MAAsB,KAAAC,MAAM,GAANA,MAAM;MAJ5C,KAAAC,MAAM,GAAG,yCAAyC;MAClD,KAAAC,OAAO,GAAG,oDAAoD;MAC9D,KAAAC,KAAK,GAAG,sDAAsD;IAEP;IAE/DC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;MACnC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,2BAA2B,IAAI,CAACD,MAAM,EAAE;MACnE,OAAO,IAAI,CAACF,IAAI,CAACS,IAAI,CAACD,GAAG,EAAE;QACzBF,KAAK;QACLC,QAAQ;QACRG,iBAAiB,EAAE;OACpB,CAAC;IACJ;IAEAC,QAAQA,CAACC,MAAc,EAAEN,KAAa,EAAEC,QAAgB;MACtD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,eAAe,IAAI,CAACD,MAAM,EAAE;MACvD,OAAO,IAAI,CAACF,IAAI,CAACS,IAAI,CAACD,GAAG,EAAE;QACzBF,KAAK;QACLC,QAAQ;QACRG,iBAAiB,EAAE;OACpB,CAAC;IACJ;IAEAG,kBAAkBA,CAACC,MAAc,EAAER,KAAa,EAAEM,MAAc;MAC9D,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACJ,KAAK,IAAIU,MAAM,OAAO;MAC1C,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAACP,GAAG,EAAE;QACxBF,KAAK;QACLM,MAAM;QACNI,UAAU,EAAE;OACb,CAAC;IACJ;IAEAC,aAAaA,CAACH,MAAc,EAAER,KAAa;MACzCY,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAC1CC,EAAE,EAAER,MAAM;QAAE;QACZR;OACD,CAAC,CAAC;IACL;IAEAiB,OAAOA,CAAA;MACL,MAAMC,IAAI,GAAGN,YAAY,CAACO,OAAO,CAAC,MAAM,CAAC;MACzC,OAAOD,IAAI,GAAGJ,IAAI,CAACM,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;IACvC;IAEAG,MAAMA,CAAA;MACJT,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MAC/B,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC;IAEAC,UAAUA,CAAA;MACR,OAAO,CAAC,CAACZ,YAAY,CAACO,OAAO,CAAC,MAAM,CAAC;IACvC;IAAC,QAAAM,CAAA,G;uBArDUjC,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAXxC,WAAW;MAAAyC,OAAA,EAAXzC,WAAW,CAAA0C,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEP3C,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}