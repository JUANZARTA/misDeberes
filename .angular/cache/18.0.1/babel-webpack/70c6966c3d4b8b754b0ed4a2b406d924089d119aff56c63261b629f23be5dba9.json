{"ast":null,"code":"import { __decorate } from \"tslib\";\n// Componente para mostrar las tareas de un tipo de deber\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet CategoryComponent = class CategoryComponent {\n  constructor(route, router, taskService, taskTypeService) {\n    this.route = route;\n    this.router = router;\n    this.taskService = taskService;\n    this.taskTypeService = taskTypeService;\n    // Nombre del tipo de tarea actual (clave Firebase)\n    this.taskTypeName = '';\n    this.taskTypeDisplayName = '';\n    this.editedOriginalName = '';\n    // Modal de edición\n    this.isEditModalOpen = false;\n    this.editedTask = {};\n    // Modal de eliminación\n    this.isDeleteModalOpen = false;\n    this.taskToDeleteKey = '';\n    // Lista de tareas cargadas\n    this.tasks = [];\n    // Estado para el modal de agregar\n    this.isAddModalOpen = false;\n    // Tarea nueva temporal\n    this.newTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'pendiente'\n    };\n  }\n  // Carga inicial del tipo de tarea y sus tareas asociadas\n  ngOnInit() {\n    this.taskTypeName = this.route.snapshot.paramMap.get('name') || '';\n    console.log('[INIT] Tareas para tipo:', this.taskTypeName);\n    this.loadTasks();\n    this.loadTaskTypeDisplayName();\n  }\n  // Consulta tareas desde Firebase\n  loadTasks() {\n    this.taskService.getTasks(this.taskTypeName).subscribe({\n      next: tasks => {\n        this.tasks = tasks;\n        console.log('[TAREAS]', tasks);\n      },\n      error: err => console.error('[ERROR] Al cargar tareas:', err)\n    });\n  }\n  // Regresa al home\n  goBack() {\n    this.router.navigate(['/app/home']);\n  }\n  // Cambia el estado de la tarea y lo guarda en Firebase\n  toggleTaskStatus(task) {\n    const estados = ['pendiente', 'para hoy', 'realizado', 'no realizado'];\n    const actual = task.estado;\n    const index = estados.indexOf(actual);\n    const siguiente = estados[(index + 1) % estados.length];\n    const updatedTask = {\n      ...task,\n      estado: siguiente\n    };\n    const key = task.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\n    this.taskService.updateTask(this.taskTypeName, key, updatedTask).subscribe({\n      next: () => this.loadTasks(),\n      error: err => console.error('[ERROR] Al cambiar estado:', err)\n    });\n  }\n  // Abre el modal para nueva tarea\n  openAddModal() {\n    this.isAddModalOpen = true;\n    this.newTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'pendiente'\n    };\n  }\n  // Cierra el modal de nueva tarea\n  closeAddModal() {\n    this.isAddModalOpen = false;\n    this.newTask = {\n      nombre: '',\n      nota: '',\n      fecha: '',\n      estado: 'pendiente'\n    };\n  }\n  // Agrega una nueva tarea a Firebase\n  addTask() {\n    if (!this.newTask.nombre.trim()) return;\n    this.taskService.addTask(this.taskTypeName, this.newTask).subscribe({\n      next: () => {\n        this.loadTasks();\n        this.closeAddModal();\n      },\n      error: err => console.error('[ERROR] Al agregar tarea:', err)\n    });\n  }\n  // Abre modal de edición (por implementar)\n  openEditModal(task) {\n    this.editedTask = {\n      ...task\n    }; // copia los datos de la tarea\n    this.editedOriginalName = task.nombre; // guarda el nombre original\n    this.isEditModalOpen = true;\n  }\n  // Confirma la edición de la tarea seleccionada\n  saveTaskEdit() {\n    if (!this.editedTask?.nombre?.trim()) return;\n    const newKey = this.editedTask.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\n    const oldKey = this.editedOriginalName.trim().toLowerCase().replace(/\\s+/g, '_');\n    // Si cambió el nombre (key), eliminamos el anterior\n    if (newKey !== oldKey) {\n      this.taskService.deleteTask(this.taskTypeName, oldKey).subscribe();\n    }\n    this.taskService.updateTask(this.taskTypeName, newKey, this.editedTask).subscribe({\n      next: () => {\n        this.loadTasks();\n        this.closeEditModal();\n      },\n      error: err => console.error('[ERROR] Al editar tarea:', err)\n    });\n  }\n  // Cierra el modal de edición\n  closeEditModal() {\n    this.isEditModalOpen = false;\n    this.editedTask = {};\n  }\n  // Abre modal de eliminación (por implementar)\n  openDeleteModal(task) {\n    this.taskToDeleteKey = task.nombre;\n    this.isDeleteModalOpen = true;\n  }\n  // Confirma la eliminación de la tarea seleccionada\n  confirmDeleteTask() {\n    this.taskService.deleteTask(this.taskTypeName, this.taskToDeleteKey).subscribe({\n      next: () => {\n        this.loadTasks();\n        this.closeDeleteModal();\n      },\n      error: err => console.error('[ERROR] Al eliminar tarea:', err)\n    });\n  }\n  // Cierra el modal de eliminación\n  closeDeleteModal() {\n    this.taskToDeleteKey = '';\n    this.isDeleteModalOpen = false;\n  }\n  // Carga el nombre visual del tipo de tarea desde Firebase\n  loadTaskTypeDisplayName() {\n    this.taskTypeService.getAllTaskTypes().subscribe({\n      next: types => {\n        const match = types.find(t => t.key === this.taskTypeName);\n        this.taskTypeDisplayName = match?.nombre || this.taskTypeName;\n      },\n      error: err => console.error('[ERROR] Al obtener nombre visual:', err)\n    });\n  }\n  // Cambia el estado de la tarea y lo guarda en Firebase\n  changeTaskStatus(task) {\n    const key = task.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\n    this.taskService.updateTask(this.taskTypeName, key, task).subscribe({\n      next: () => this.loadTasks(),\n      error: err => console.error('[ERROR] Al actualizar estado:', err)\n    });\n  }\n};\nCategoryComponent = __decorate([Component({\n  selector: 'app-category',\n  standalone: true,\n  templateUrl: './category.component.html',\n  styleUrls: [],\n  imports: [CommonModule, FormsModule]\n})], CategoryComponent);\nexport { CategoryComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","CategoryComponent","constructor","route","router","taskService","taskTypeService","taskTypeName","taskTypeDisplayName","editedOriginalName","isEditModalOpen","editedTask","isDeleteModalOpen","taskToDeleteKey","tasks","isAddModalOpen","newTask","nombre","nota","fecha","estado","ngOnInit","snapshot","paramMap","get","console","log","loadTasks","loadTaskTypeDisplayName","getTasks","subscribe","next","error","err","goBack","navigate","toggleTaskStatus","task","estados","actual","index","indexOf","siguiente","length","updatedTask","key","trim","toLowerCase","replace","updateTask","openAddModal","closeAddModal","addTask","openEditModal","saveTaskEdit","newKey","oldKey","deleteTask","closeEditModal","openDeleteModal","confirmDeleteTask","closeDeleteModal","getAllTaskTypes","types","match","find","t","changeTaskStatus","__decorate","selector","standalone","templateUrl","styleUrls","imports"],"sources":["E:\\Golden Panda\\8) Programacion\\MisDeberes\\MisDeberes\\src\\app\\pages\\category\\category.component.ts"],"sourcesContent":["// Componente para mostrar las tareas de un tipo de deber\r\nimport { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TaskService } from '../../services/task.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TaskTypeService } from '../../services/taskType.service';\r\n\r\n@Component({\r\n  selector: 'app-category',\r\n  standalone: true,\r\n  templateUrl: './category.component.html',\r\n  styleUrls: [],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class CategoryComponent {\r\n  // Nombre del tipo de tarea actual (clave Firebase)\r\n  taskTypeName: string = '';\r\n  taskTypeDisplayName: string = '';\r\n  editedOriginalName: string = '';\r\n\r\n  // Modal de edición\r\n  isEditModalOpen: boolean = false;\r\n  editedTask: any = {};\r\n\r\n  // Modal de eliminación\r\n  isDeleteModalOpen: boolean = false;\r\n  taskToDeleteKey: string = '';\r\n\r\n  // Lista de tareas cargadas\r\n  tasks: {\r\n    nombre: string;\r\n    nota?: string;\r\n    fecha?: string;\r\n    estado: 'realizado' | 'pendiente' | 'no realizado' | 'para hoy';\r\n  }[] = [];\r\n\r\n  // Estado para el modal de agregar\r\n  isAddModalOpen: boolean = false;\r\n\r\n  // Tarea nueva temporal\r\n  newTask = {\r\n    nombre: '',\r\n    nota: '',\r\n    fecha: '',\r\n    estado: 'pendiente' as\r\n      | 'pendiente'\r\n      | 'realizado'\r\n      | 'no realizado'\r\n      | 'para hoy',\r\n  };\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private taskService: TaskService,\r\n    private taskTypeService: TaskTypeService\r\n  ) {}\r\n\r\n  // Carga inicial del tipo de tarea y sus tareas asociadas\r\n  ngOnInit(): void {\r\n    this.taskTypeName = this.route.snapshot.paramMap.get('name') || '';\r\n    console.log('[INIT] Tareas para tipo:', this.taskTypeName);\r\n    this.loadTasks();\r\n    this.loadTaskTypeDisplayName();\r\n  }\r\n\r\n  // Consulta tareas desde Firebase\r\n  loadTasks(): void {\r\n    this.taskService.getTasks(this.taskTypeName).subscribe({\r\n      next: (tasks) => {\r\n        this.tasks = tasks;\r\n        console.log('[TAREAS]', tasks);\r\n      },\r\n      error: (err) => console.error('[ERROR] Al cargar tareas:', err),\r\n    });\r\n  }\r\n\r\n  // Regresa al home\r\n  goBack(): void {\r\n    this.router.navigate(['/app/home']);\r\n  }\r\n\r\n  // Cambia el estado de la tarea y lo guarda en Firebase\r\n  toggleTaskStatus(task: any): void {\r\n    const estados = ['pendiente', 'para hoy', 'realizado', 'no realizado'];\r\n    const actual = task.estado;\r\n    const index = estados.indexOf(actual);\r\n    const siguiente = estados[(index + 1) % estados.length];\r\n\r\n    const updatedTask = { ...task, estado: siguiente };\r\n\r\n    const key = task.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\r\n\r\n    this.taskService.updateTask(this.taskTypeName, key, updatedTask).subscribe({\r\n      next: () => this.loadTasks(),\r\n      error: (err) => console.error('[ERROR] Al cambiar estado:', err),\r\n    });\r\n  }\r\n\r\n  // Abre el modal para nueva tarea\r\n  openAddModal(): void {\r\n    this.isAddModalOpen = true;\r\n    this.newTask = {\r\n      nombre: '',\r\n      nota: '',\r\n      fecha: '',\r\n      estado: 'pendiente',\r\n    };\r\n  }\r\n\r\n  // Cierra el modal de nueva tarea\r\n  closeAddModal(): void {\r\n    this.isAddModalOpen = false;\r\n    this.newTask = {\r\n      nombre: '',\r\n      nota: '',\r\n      fecha: '',\r\n      estado: 'pendiente',\r\n    };\r\n  }\r\n\r\n  // Agrega una nueva tarea a Firebase\r\n  addTask(): void {\r\n    if (!this.newTask.nombre.trim()) return;\r\n\r\n    this.taskService.addTask(this.taskTypeName, this.newTask).subscribe({\r\n      next: () => {\r\n        this.loadTasks();\r\n        this.closeAddModal();\r\n      },\r\n      error: (err) => console.error('[ERROR] Al agregar tarea:', err),\r\n    });\r\n  }\r\n\r\n  // Abre modal de edición (por implementar)\r\n  openEditModal(task: any): void {\r\n    this.editedTask = { ...task }; // copia los datos de la tarea\r\n    this.editedOriginalName = task.nombre; // guarda el nombre original\r\n    this.isEditModalOpen = true;\r\n  }\r\n\r\n  // Confirma la edición de la tarea seleccionada\r\n  saveTaskEdit(): void {\r\n    if (!this.editedTask?.nombre?.trim()) return;\r\n\r\n    const newKey = this.editedTask.nombre\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '_');\r\n    const oldKey = this.editedOriginalName\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '_');\r\n\r\n    // Si cambió el nombre (key), eliminamos el anterior\r\n    if (newKey !== oldKey) {\r\n      this.taskService.deleteTask(this.taskTypeName, oldKey).subscribe();\r\n    }\r\n\r\n    this.taskService\r\n      .updateTask(this.taskTypeName, newKey, this.editedTask)\r\n      .subscribe({\r\n        next: () => {\r\n          this.loadTasks();\r\n          this.closeEditModal();\r\n        },\r\n        error: (err) => console.error('[ERROR] Al editar tarea:', err),\r\n      });\r\n  }\r\n\r\n  // Cierra el modal de edición\r\n  closeEditModal(): void {\r\n    this.isEditModalOpen = false;\r\n    this.editedTask = {};\r\n  }\r\n\r\n  // Abre modal de eliminación (por implementar)\r\n  openDeleteModal(task: any): void {\r\n    this.taskToDeleteKey = task.nombre;\r\n    this.isDeleteModalOpen = true;\r\n  }\r\n  // Confirma la eliminación de la tarea seleccionada\r\n  confirmDeleteTask(): void {\r\n    this.taskService\r\n      .deleteTask(this.taskTypeName, this.taskToDeleteKey)\r\n      .subscribe({\r\n        next: () => {\r\n          this.loadTasks();\r\n          this.closeDeleteModal();\r\n        },\r\n        error: (err) => console.error('[ERROR] Al eliminar tarea:', err),\r\n      });\r\n  }\r\n  // Cierra el modal de eliminación\r\n  closeDeleteModal(): void {\r\n    this.taskToDeleteKey = '';\r\n    this.isDeleteModalOpen = false;\r\n  }\r\n\r\n  // Carga el nombre visual del tipo de tarea desde Firebase\r\n  loadTaskTypeDisplayName(): void {\r\n    this.taskTypeService.getAllTaskTypes().subscribe({\r\n      next: (types) => {\r\n        const match = types.find((t) => t.key === this.taskTypeName);\r\n        this.taskTypeDisplayName = match?.nombre || this.taskTypeName;\r\n      },\r\n      error: (err) => console.error('[ERROR] Al obtener nombre visual:', err),\r\n    });\r\n  }\r\n\r\n  // Cambia el estado de la tarea y lo guarda en Firebase\r\n  changeTaskStatus(task: any): void {\r\n    const key = task.nombre.trim().toLowerCase().replace(/\\s+/g, '_');\r\n    this.taskService.updateTask(this.taskTypeName, key, task).subscribe({\r\n      next: () => this.loadTasks(),\r\n      error: (err) => console.error('[ERROR] Al actualizar estado:', err)\r\n    });\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}